// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$BATCH_TILES = tuple(int(bt) for bt in BATCH_TILES.split(","))

#include <assert.h>

#include <hvx_hexagon_protos.h>
#include <hexagon_protos.h>
#include <hexagon_types.h>

#include <xnnpack/common.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/vunary.h>

$for BATCH_TILE in BATCH_TILES:
  $assert BATCH_TILE % 32 == 0
  $assert BATCH_TILE >= 32
  $SIMD_TILE = BATCH_TILE // 32

  void xnn_f32_vneg_ukernel__hvx_u${BATCH_TILE}(
      size_t batch,
      const float* input,
      float* output,
      const union xnn_f32_default_params params[restrict XNN_MIN_ELEMENTS(1)])
  {
    assert(batch != 0);
    assert(batch % sizeof(float) == 0);
    assert(input != NULL);
    assert(output != NULL);

    const HVX_UVector *vptr = (const HVX_UVector *) input;
    HVX_UVector *vptr_o = (HVX_UVector*) output;

    HVX_Vector v0 = Q6_V_vsplat_R(0);

    $if BATCH_TILE > 32:
      for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
        $for N in range(SIMD_TILE):
          HVX_Vector vx${ABC[N]} = *vptr++;

        $for N in range(SIMD_TILE):
          HVX_Vector vacc${ABC[N]} = Q6_Vsf_vsub_VsfVsf(v0, vx${ABC[N]});

        $for N in range(SIMD_TILE):
          *vptr_o++ = vacc${ABC[N]};
      }

    for (; batch >= 32 * sizeof(float); batch -= 32 * sizeof(float)) {
      HVX_Vector vx = *vptr++;

      HVX_Vector vacc = Q6_Vsf_vsub_VsfVsf(v0, vx);


      *vptr_o++ = vacc;
    }

    if XNN_UNLIKELY(batch != 0) {
      HVX_Vector vx = *vptr;

      HVX_Vector vacc = Q6_Vsf_vsub_VsfVsf(v0, vx);

      Q6_V_vstu_variable(vptr_o, batch, vacc);
    }
  }
