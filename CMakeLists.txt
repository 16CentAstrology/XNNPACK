# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# Copyright 2019 Google LLC
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

CMAKE_MINIMUM_REQUIRED(VERSION 3.15 FATAL_ERROR)

# Allow specifying -D<PackageName>_ROOT.
CMAKE_POLICY(SET CMP0074 NEW)

# MSVC runtime library flags are selected by an abstraction.
CMAKE_POLICY(SET CMP0091 NEW)

# ---[ Project and semantic versioning.
PROJECT(XNNPACK C CXX ASM)

# --[ Use ccache if available
FIND_PROGRAM(CCACHE_BINARY "ccache")
IF(CCACHE_BINARY)
  MESSAGE(STATUS "Using ccache: ${CCACHE_BINARY}")
  SET(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_BINARY}" CACHE STRING "CXX compiler launcher" FORCE)
  SET(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_BINARY}" CACHE STRING "C compiler launcher" FORCE)
  IF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_C_FLAGS_DEBUG_INIT "${CMAKE_C_FLAGS_DEBU_INITG}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_DEBUG_INIT "${CMAKE_CXX_FLAGS_DEBUG_INIT}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}")
    STRING(REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}")
  ENDIF()
ENDIF()

SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_EXTENSIONS NO)
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED YES)
SET(CMAKE_CXX_EXTENSIONS NO)

# ---[ Options.
SET(XNNPACK_LIBRARY_TYPE "default" CACHE STRING "Type of library (shared, static, or default) to build")
SET_PROPERTY(CACHE XNNPACK_LIBRARY_TYPE PROPERTY STRINGS default static shared)
OPTION(XNNPACK_ENABLE_ASSEMBLY "Build XNNPACK with assembly micro-kernels" ON)
OPTION(XNNPACK_ENABLE_MEMOPT "Build XNNPACK with optimized memory allocation scheme" ON)
OPTION(XNNPACK_ENABLE_SPARSE "Build XNNPACK with graph rewriting for sparse inference" ON)
OPTION(XNNPACK_ENABLE_GEMM_M_SPECIALIZATION "Build XNNPACK with support for selecting microkernel with different MR" ON)
OPTION(XNNPACK_ENABLE_DWCONV_MULTIPASS "Build XNNPACK with DWCONV multipass microkernels enabled" OFF)
OPTION(XNNPACK_BUILD_LIBRARY "Build XNNPACK library" ON)
OPTION(XNNPACK_BUILD_TESTS "Build XNNPACK unit tests" ON)
OPTION(XNNPACK_BUILD_ALL_MICROKERNELS "Builds all XNNPACK Microkernels" ON)
OPTION(XNNPACK_BUILD_BENCHMARKS "Build XNNPACK benchmarks" ON)
OPTION(XNNPACK_USE_SYSTEM_LIBS "Use system-provided dependency libraries" OFF)
OPTION(USE_GNU_SOURCE "Use _GNU_SOURCE macro" OFF)
IF(XNNPACK_BUILD_BENCHMARKS OR XNNPACK_BUILD_TESTS)
  SET(XNNPACK_BUILD_ALL_MICROKERNELS ON)
ENDIF()

# --- [ Determine target processor
IF(CMAKE_OSX_ARCHITECTURES)
  LIST(LENGTH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_ARCHITECTURES_COUNT)
  IF(CMAKE_OSX_ARCHITECTURES_COUNT GREATER 1)
    MESSAGE(FATAL_ERROR "Unsupported XNNPACK build with multiple OSX architectures (${CMAKE_OSX_ARCHITECTURES}). "
      "Specify a single architecture in CMAKE_OSX_ARCHITECTURES and re-configure. ")
  ENDIF()
  IF(NOT CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64|arm64e|arm64_32)$")
    MESSAGE(FATAL_ERROR "Unrecognized CMAKE_OSX_ARCHITECTURES value \"${CMAKE_OSX_ARCHITECTURES}\"")
  ENDIF()
  SET(XNNPACK_TARGET_PROCESSOR "${CMAKE_OSX_ARCHITECTURES}")
  ADD_COMPILE_OPTIONS("-Wno-shorten-64-to-32")
ELSEIF(CMAKE_GENERATOR MATCHES "^Visual Studio " AND CMAKE_GENERATOR_PLATFORM)
  IF(CMAKE_GENERATOR_PLATFORM STREQUAL "Win32")
    SET(XNNPACK_TARGET_PROCESSOR "x86")
  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL "x64")
    SET(XNNPACK_TARGET_PROCESSOR "x86_64")
  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL "ARM64")
    SET(XNNPACK_TARGET_PROCESSOR "arm64")
  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL "ARM64EC")
    SET(XNNPACK_TARGET_PROCESSOR "arm64ec")
  ELSE()
    MESSAGE(FATAL_ERROR "Unsupported Visual Studio architecture \"${CMAKE_GENERATOR_PLATFORM}\"")
  ENDIF()
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^i[3-7]86$")
  SET(XNNPACK_TARGET_PROCESSOR "x86")
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64")
  SET(XNNPACK_TARGET_PROCESSOR "x86_64")
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]")
  SET(XNNPACK_TARGET_PROCESSOR "arm")
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
  SET(XNNPACK_TARGET_PROCESSOR "arm64")
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64le")
  SET(XNNPACK_TARGET_PROCESSOR "ppc64")
ELSEIF(NOT XNNPACK_TARGET_PROCESSOR MATCHES "^(x86(_64)?|arm64|riscv(32|64|128)|Hexagon|ppc64)$")
  SET(XNNPACK_TARGET_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}")
ELSE()
  MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_PROCESSOR value \"${CMAKE_SYSTEM_PROCESSOR}\"")
ENDIF()
MESSAGE(STATUS "Building for XNNPACK_TARGET_PROCESSOR: ${XNNPACK_TARGET_PROCESSOR}")

# --- [ Processor-specific options
OPTION(XNNPACK_ENABLE_ARM_FP16_SCALAR "Build XNNPACK with ARM FP16 (FP16 data processing) scalar micro-kernels" ON)
OPTION(XNNPACK_ENABLE_ARM_FP16_VECTOR "Build XNNPACK with ARM FP16 (FP16 data processing) vector micro-kernels" ON)
OPTION(XNNPACK_ENABLE_ARM_BF16 "Build XNNPACK with ARM BF16 (BFLOAT16) micro-kernels" ON)
OPTION(XNNPACK_ENABLE_ARM_DOTPROD "Build XNNPACK with ARM DotProd (integer dot product) micro-kernels" ON)
OPTION(XNNPACK_ENABLE_ARM_I8MM "Build XNNPACK with ARM I8MM (8-bit integer matrix multiply accumulate) micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "11")
    SET(XNNPACK_ENABLE_ARM_I8MM OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_RISCV_VECTOR "Build XNNPACK with RISC-V Vector micro-kernels" ON)
OPTION(XNNPACK_ENABLE_VSX "Build XNNPACK with VSX Vector micro-kernels for Power" ON)
OPTION(XNNPACK_ENABLE_AVXVNNI "Build XNNPACK with AVX-VNNI micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "11")
    SET(XNNPACK_ENABLE_AVXVNNI OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVXVNNI OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_AVX256SKX "Build XNNPACK with AVX256SKX micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "11")
    SET(XNNPACK_ENABLE_AVX256SKX OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVX256SKX OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_AVX256VNNI "Build XNNPACK with AVX256VNNI micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "11")
    SET(XNNPACK_ENABLE_AVX256VNNI OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVX256VNNI OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_AVX256VNNIGFNI "Build XNNPACK with AVX256VNNIGFNI micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "11")
    SET(XNNPACK_ENABLE_AVX256VNNIGFNI OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVX256VNNIGFNI OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_AVX512VNNIGFNI "Build XNNPACK with AVX512VNNIGFNI micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "8")
    SET(XNNPACK_ENABLE_AVX512VNNIGFNI OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "6")
    SET(XNNPACK_ENABLE_AVX512VNNIGFNI OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_AVX512AMX "Build XNNPACK with AVX512-AMX micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "13")
    SET(XNNPACK_ENABLE_AVX512AMX OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVX512AMX OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
  SET(XNNPACK_ENABLE_AVX512AMX OFF)
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR STREQUAL "x86")
  SET(XNNPACK_ENABLE_AVX512AMX OFF)
ENDIF()
OPTION(XNNPACK_ENABLE_AVX512FP16 "Build XNNPACK with AVX512-FP16 micro-kernels" ON)
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "13")
    SET(XNNPACK_ENABLE_AVX512FP16 OFF)
  ENDIF()
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS "15")
    SET(XNNPACK_ENABLE_AVX512FP16 OFF)
  ENDIF()
ENDIF()
OPTION(XNNPACK_ENABLE_HVX "Build XNNPACK with Hexagon HVX micro-kernels" ON)
OPTION(XNNPACK_ENABLE_KLEIDIAI "Use KleidiAI GEMM microkernels for Arm" ON)
IF(XNNPACK_TARGET_PROCESSOR STREQUAL "arm64" AND XNNPACK_ENABLE_ARM_I8MM AND NOT CMAKE_C_COMPILER_ID STREQUAL "MSVC")
  IF (XNNPACK_ENABLE_KLEIDIAI)
    MESSAGE(STATUS "Enabling KleidiAI for Arm64")
  ENDIF()
ELSE()
  SET(XNNPACK_ENABLE_KLEIDIAI OFF)
ENDIF()

# ---[ CMake options
INCLUDE(GNUInstallDirs)

IF(XNNPACK_BUILD_TESTS)
  ENABLE_TESTING()
ENDIF()

ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ARM_FP16_VECTOR=$<BOOL:${XNNPACK_ENABLE_ARM_FP16_VECTOR}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ARM_FP16_SCALAR=$<BOOL:${XNNPACK_ENABLE_ARM_FP16_SCALAR}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ARM_BF16=$<BOOL:${XNNPACK_ENABLE_ARM_BF16}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ARM_DOTPROD=$<BOOL:${XNNPACK_ENABLE_ARM_DOTPROD}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ARM_I8MM=$<BOOL:${XNNPACK_ENABLE_ARM_I8MM}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_RISCV_VECTOR=$<BOOL:${XNNPACK_ENABLE_RISCV_VECTOR}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVXVNNI=$<BOOL:${XNNPACK_ENABLE_AVXVNNI}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX256SKX=$<BOOL:${XNNPACK_ENABLE_AVX256SKX}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX256VNNI=$<BOOL:${XNNPACK_ENABLE_AVX256VNNI}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX256VNNIGFNI=$<BOOL:${XNNPACK_ENABLE_AVX256VNNIGFNI}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX512VNNIGFNI=$<BOOL:${XNNPACK_ENABLE_AVX512VNNIGFNI}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX512AMX=$<BOOL:${XNNPACK_ENABLE_AVX512AMX}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_AVX512FP16=$<BOOL:${XNNPACK_ENABLE_AVX512FP16}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_VSX=$<BOOL:${XNNPACK_ENABLE_VSX}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_ASSEMBLY=$<BOOL:${XNNPACK_ENABLE_ASSEMBLY}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_MEMOPT=$<BOOL:${XNNPACK_ENABLE_MEMOPT}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_SPARSE=$<BOOL:${XNNPACK_ENABLE_SPARSE}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_GEMM_M_SPECIALIZATION=$<BOOL:${XNNPACK_ENABLE_GEMM_M_SPECIALIZATION}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_DWCONV_MULTIPASS=$<BOOL:${XNNPACK_ENABLE_DWCONV_MULTIPASS}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_HVX=$<BOOL:${XNNPACK_ENABLE_HVX}>")
ADD_COMPILE_DEFINITIONS("XNN_ENABLE_KLEIDIAI=$<BOOL:${XNNPACK_ENABLE_KLEIDIAI}>")

IF(XNNPACK_TARGET_PROCESSOR MATCHES "Hexagon")
  ADD_COMPILE_DEFINITIONS("XNN_ENABLE_CPUINFO=0")
ELSE()
  ADD_COMPILE_DEFINITIONS("XNN_ENABLE_CPUINFO=1")
ENDIF()

IF(USE_GNU_SOURCE)
  ADD_COMPILE_DEFINITIONS(_GNU_SOURCE)
ENDIF()

IF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
  # Disable "unary minus operator applied to unsigned type, result still unsigned" warning
  ADD_COMPILE_OPTIONS("/wd4146")
  # Test files have many sections, increase the limit. See
  # https://learn.microsoft.com/en-us/cpp/build/reference/bigobj-increase-number-of-sections-in-dot-obj-file.
  ADD_COMPILE_OPTIONS("/bigobj")
ENDIF()

IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # Disable "note: parameter passing for argument of type ... changed/will change in ..."
  ADD_COMPILE_OPTIONS("-Wno-psabi")
ENDIF()

# ---[ Build flags
IF(NOT CMAKE_SYSTEM_NAME)
  MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_NAME not defined")
ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT)$")
  MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME value \"${CMAKE_SYSTEM_NAME}\"")
ENDIF()
IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  # Disable min/max macros as they break std::min/max and std::numeric_limits<T>min/max.
  ADD_COMPILE_DEFINITIONS("NOMINMAX")
ENDIF()

# ---[ Download deps
IF(NOT XNNPACK_USE_SYSTEM_LIBS)
  IF(NOT DEFINED CPUINFO_SOURCE_DIR)
    MESSAGE(STATUS "Downloading cpuinfo to ${CMAKE_BINARY_DIR}/cpuinfo-source (define CPUINFO_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadCpuinfo.cmake "${CMAKE_BINARY_DIR}/cpuinfo-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/cpuinfo-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/cpuinfo-download")
    SET(CPUINFO_SOURCE_DIR "${CMAKE_BINARY_DIR}/cpuinfo-source" CACHE STRING "cpuinfo source directory")
  ENDIF()

  IF(NOT DEFINED FP16_SOURCE_DIR)
    MESSAGE(STATUS "Downloading FP16 to ${CMAKE_BINARY_DIR}/FP16-source (define FP16_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadFP16.cmake "${CMAKE_BINARY_DIR}/FP16-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/FP16-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/FP16-download")
    SET(FP16_SOURCE_DIR "${CMAKE_BINARY_DIR}/FP16-source" CACHE STRING "FP16 source directory")
  ENDIF()

  IF(NOT DEFINED FXDIV_SOURCE_DIR)
    MESSAGE(STATUS "Downloading FXdiv to ${CMAKE_BINARY_DIR}/FXdiv-source (define FXDIV_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadFXdiv.cmake "${CMAKE_BINARY_DIR}/FXdiv-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/FXdiv-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/FXdiv-download")
    SET(FXDIV_SOURCE_DIR "${CMAKE_BINARY_DIR}/FXdiv-source" CACHE STRING "FXdiv source directory")
  ENDIF()

  IF(NOT DEFINED PTHREADPOOL_SOURCE_DIR)
    MESSAGE(STATUS "Downloading pthreadpool to ${CMAKE_BINARY_DIR}/pthreadpool-source (define PTHREADPOOL_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadPThreadPool.cmake "${CMAKE_BINARY_DIR}/pthreadpool-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/pthreadpool-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/pthreadpool-download")
    SET(PTHREADPOOL_SOURCE_DIR "${CMAKE_BINARY_DIR}/pthreadpool-source" CACHE STRING "pthreadpool source directory")
  ENDIF()

  IF(XNNPACK_BUILD_TESTS AND NOT DEFINED GOOGLETEST_SOURCE_DIR)
    MESSAGE(STATUS "Downloading Google Test to ${CMAKE_BINARY_DIR}/googletest-source (define GOOGLETEST_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadGoogleTest.cmake "${CMAKE_BINARY_DIR}/googletest-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googletest-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googletest-download")
    SET(GOOGLETEST_SOURCE_DIR "${CMAKE_BINARY_DIR}/googletest-source" CACHE STRING "Google Test source directory")
  ENDIF()

  IF(XNNPACK_BUILD_BENCHMARKS AND NOT DEFINED GOOGLEBENCHMARK_SOURCE_DIR)
    MESSAGE(STATUS "Downloading Google Benchmark to ${CMAKE_BINARY_DIR}/googlebenchmark-source (define GOOGLEBENCHMARK_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadGoogleBenchmark.cmake "${CMAKE_BINARY_DIR}/googlebenchmark-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googlebenchmark-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googlebenchmark-download")
    SET(GOOGLEBENCHMARK_SOURCE_DIR "${CMAKE_BINARY_DIR}/googlebenchmark-source" CACHE STRING "Google Benchmark source directory")
  ENDIF()

  IF(XNNPACK_ENABLE_KLEIDIAI AND NOT DEFINED KLEIDIAI_SOURCE_DIR)
    MESSAGE(STATUS "Downloading KleidiAI to ${CMAKE_BINARY_DIR}/kleidiai-source (define KLEIDIAI_SOURCE_DIR to avoid it)")
    CONFIGURE_FILE(cmake/DownloadKleidiAI.cmake "${CMAKE_BINARY_DIR}/kleidiai-download/CMakeLists.txt")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/kleidiai-download")
    EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/kleidiai-download")
    SET(KLEIDIAI_SOURCE_DIR "${CMAKE_BINARY_DIR}/kleidiai-source" CACHE STRING "kleidiai source directory")
  ENDIF()
ENDIF()

# ---[ XNNPACK library
INCLUDE(cmake/gen/microkernels.cmake)

SET(OPERATOR_SRCS
  src/operator-delete.c
  src/operators/argmax-pooling-nhwc.c
  src/operators/average-pooling-nhwc.c
  src/operators/batch-matrix-multiply-nc.c
  src/operators/binary-elementwise-nd.c
  src/operators/channel-shuffle-nc.c
  src/operators/constant-pad-nd.c
  src/operators/convolution-nchw.c
  src/operators/convolution-nhwc.c
  src/operators/deconvolution-nhwc.c
  src/operators/dynamic-fully-connected-nc.c
  src/operators/fully-connected-nc.c
  src/operators/global-average-pooling-ncw.c
  src/operators/global-average-pooling-nwc.c
  src/operators/lut-elementwise-nc.c
  src/operators/max-pooling-nhwc.c
  src/operators/prelu-nc.c
  src/operators/reduce-nd.c
  src/operators/resize-bilinear-nchw.c
  src/operators/resize-bilinear-nhwc.c
  src/operators/rope-nthc.c
  src/operators/scaled-dot-product-attention-nhtc.c
  src/operators/slice-nd.c
  src/operators/softmax-nc.c
  src/operators/transpose-nd.c
  src/operators/unary-elementwise-nc.c
  src/operators/unpooling-nhwc.c)

SET(SUBGRAPH_SRCS
  src/memory-planner.c
  src/runtime.c
  src/subgraph.c
  src/subgraph/abs.c
  src/subgraph/add2.c
  src/subgraph/argmax-pooling-2d.c
  src/subgraph/average-pooling-2d.c
  src/subgraph/bankers-rounding.c
  src/subgraph/batch-matrix-multiply.c
  src/subgraph/ceiling.c
  src/subgraph/clamp.c
  src/subgraph/concatenate.c
  src/subgraph/convert.c
  src/subgraph/convolution-2d.c
  src/subgraph/copy.c
  src/subgraph/copysign.c
  src/subgraph/deconvolution-2d.c
  src/subgraph/depth-to-space-2d.c
  src/subgraph/depthwise-convolution-2d.c
  src/subgraph/divide.c
  src/subgraph/elu.c
  src/subgraph/even-split.c
  src/subgraph/exp.c
  src/subgraph/floor.c
  src/subgraph/fully-connected-sparse.c
  src/subgraph/fully-connected.c
  src/subgraph/gelu.c
  src/subgraph/global-average-pooling.c
  src/subgraph/global-sum-pooling.c
  src/subgraph/hardswish.c
  src/subgraph/leaky-relu.c
  src/subgraph/log.c
  src/subgraph/max-pooling-2d.c
  src/subgraph/maximum2.c
  src/subgraph/minimum2.c
  src/subgraph/multiply2.c
  src/subgraph/negate.c
  src/subgraph/prelu.c
  src/subgraph/reciprocal-square-root.c
  src/subgraph/reshape-helpers.c
  src/subgraph/scaled-dot-product-attention.c
  src/subgraph/sigmoid.c
  src/subgraph/softmax.c
  src/subgraph/space-to-depth-2d.c
  src/subgraph/square-root.c
  src/subgraph/square.c
  src/subgraph/squared-difference.c
  src/subgraph/static-constant-pad.c
  src/subgraph/static-mean.c
  src/subgraph/static-reshape.c
  src/subgraph/static-resize-bilinear-2d.c
  src/subgraph/static-slice.c
  src/subgraph/static-transpose.c
  src/subgraph/subtract.c
  src/subgraph/tanh.c
  src/subgraph/unpooling-2d.c
  src/subgraph/validation.c
  src/tensor.c)

SET(LOGGING_SRCS
  src/enums/allocation-type.c
  src/enums/datatype-strings.c
  src/enums/microkernel-type.c
  src/enums/node-type.c
  src/enums/operator-type.c
  src/log.c)

SET(XNNPACK_SRCS
  src/configs/argmaxpool-config.c
  src/configs/avgpool-config.c
  src/configs/binary-elementwise-config.c
  src/configs/cmul-config.c
  src/configs/conv-hwc2chw-config.c
  src/configs/dwconv-config.c
  src/configs/dwconv2d-chw-config.c
  src/configs/experiments-config.c
  src/configs/gavgpool-config.c
  src/configs/gavgpool-cw-config.c
  src/configs/gemm-config.c
  src/configs/ibilinear-chw-config.c
  src/configs/ibilinear-config.c
  src/configs/lut32norm-config.c
  src/configs/maxpool-config.c
  src/configs/pavgpool-config.c
  src/configs/prelu-config.c
  src/configs/raddstoreexpminusmax-config.c
  src/configs/reduce-config.c
  src/configs/rmax-config.c
  src/configs/spmm-config.c
  src/configs/transpose-config.c
  src/configs/unary-elementwise-config.c
  src/configs/unpool-config.c
  src/configs/vmulcaddc-config.c
  src/configs/xx-fill-config.c
  src/configs/xx-pad-config.c
  src/configs/x8-lut-config.c
  src/configs/zip-config.c
  src/init.c
  src/params.c
  "${PROJECT_BINARY_DIR}/build_identifier.c")

SET(TABLE_SRCS
  src/tables/exp2-k-over-64.c
  src/tables/exp2-k-over-2048.c
  src/tables/exp2minus-k-over-4.c
  src/tables/exp2minus-k-over-8.c
  src/tables/exp2minus-k-over-16.c
  src/tables/exp2minus-k-over-32.c
  src/tables/exp2minus-k-over-64.c
  src/tables/exp2minus-k-over-2048.c
  src/tables/vlog.c)

SET(PROD_SCALAR_MICROKERNEL_SRCS src/amalgam/gen/scalar.c)
SET(PROD_ARMSIMD32_MICROKERNEL_SRCS src/amalgam/gen/armsimd32.c)
SET(PROD_FP16ARITH_MICROKERNEL_SRCS src/amalgam/gen/fp16arith.c)
SET(PROD_NEON_MICROKERNEL_SRCS src/amalgam/gen/neon.c)
SET(PROD_NEONFP16_MICROKERNEL_SRCS src/amalgam/gen/neonfp16.c)
SET(PROD_NEONFMA_MICROKERNEL_SRCS src/amalgam/gen/neonfma.c)
SET(PROD_NEON_AARCH64_MICROKERNEL_SRCS src/amalgam/gen/neon-aarch64.c src/amalgam/gen/neonfma-aarch64.c)
SET(PROD_NEONV8_MICROKERNEL_SRCS src/amalgam/gen/neonv8.c)
SET(PROD_NEONFP16ARITH_MICROKERNEL_SRCS src/amalgam/gen/neonfp16arith.c)
SET(PROD_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS src/amalgam/gen/neonfp16arith-aarch64.c)
SET(PROD_NEONDOT_MICROKERNEL_SRCS src/amalgam/gen/neondot.c)
SET(PROD_NEONDOT_AARCH64_MICROKERNEL_SRCS src/amalgam/gen/neondot-aarch64.c)
SET(PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS src/amalgam/gen/neondotfp16arith.c)
SET(PROD_NEONDOTFP16ARITH_AARCH64_MICROKERNEL_SRCS src/amalgam/gen/neondotfp16-aarch64.c)
SET(PROD_NEONI8MM_AARCH64_MICROKERNEL_SRCS src/amalgam/gen/neoni8mm-aarch64.c)
SET(PROD_NEONI8MM_MICROKERNEL_SRCS src/amalgam/gen/neoni8mm.c)
SET(PROD_SSE_MICROKERNEL_SRCS src/amalgam/gen/sse.c)
SET(PROD_SSE2_MICROKERNEL_SRCS src/amalgam/gen/sse2.c)
SET(PROD_SSSE3_MICROKERNEL_SRCS src/amalgam/gen/ssse3.c)
SET(PROD_SSE41_MICROKERNEL_SRCS src/amalgam/gen/sse41.c)
SET(PROD_AVX_MICROKERNEL_SRCS src/amalgam/gen/avx.c)
SET(PROD_F16C_MICROKERNEL_SRCS src/amalgam/gen/f16c.c)
SET(PROD_FMA3_MICROKERNEL_SRCS src/amalgam/gen/fma3.c)
SET(PROD_AVX2_MICROKERNEL_SRCS src/amalgam/gen/avx2.c)
SET(PROD_AVX512F_MICROKERNEL_SRCS src/amalgam/gen/avx512f.c)
SET(PROD_AVX512SKX_MICROKERNEL_SRCS src/amalgam/gen/avx512skx.c)
SET(PROD_AVX512VBMI_MICROKERNEL_SRCS src/amalgam/gen/avx512vbmi.c)
SET(PROD_AVX512VNNI_MICROKERNEL_SRCS src/amalgam/gen/avx512vnni.c)
SET(PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS src/amalgam/gen/avx512vnnigfni.c)
SET(PROD_AVX512AMX_MICROKERNEL_SRCS src/amalgam/gen/avx512amx.c)
SET(PROD_AVX512FP16_MICROKERNEL_SRCS src/amalgam/gen/avx512fp16.c)
SET(PROD_RVV_MICROKERNEL_SRCS src/amalgam/gen/rvv.c)
SET(PROD_RVVFP16ARITH_MICROKERNEL_SRCS src/amalgam/gen/rvvfp16arith.c)
SET(PROD_AVXVNNI_MICROKERNEL_SRCS src/amalgam/gen/avxvnni.c)
SET(PROD_AVX256SKX_MICROKERNEL_SRCS src/amalgam/gen/avx256skx.c)
SET(PROD_AVX256VNNI_MICROKERNEL_SRCS src/amalgam/gen/avx256vnni.c)
SET(PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS src/amalgam/gen/avx256vnnigfni.c)

SET(PROD_MICROKERNEL_SRCS ${PROD_SCALAR_MICROKERNEL_SRCS})
SET(ALL_MICROKERNEL_SRCS ${ALL_SCALAR_MICROKERNEL_SRCS})
IF(XNNPACK_TARGET_PROCESSOR STREQUAL "arm")
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_ARMSIMD32_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFMA_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONV8_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_FP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD AND XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_I8MM)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONI8MM_MICROKERNEL_SRCS})
  ENDIF()
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_ARMSIMD32_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEON_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFMA_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONV8_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_FP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR AND XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_BF16)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONBF16_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOT_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_I8MM)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONI8MM_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ASSEMBLY)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${AARCH32_ASM_MICROKERNEL_SRCS})
    LIST(APPEND ALL_MICROKERNEL_SRCS ${AARCH32_ASM_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^arm64")
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFMA_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONV8_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_AARCH64_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_AARCH64_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD AND XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOTFP16ARITH_AARCH64_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_I8MM)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONI8MM_AARCH64_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONI8MM_MICROKERNEL_SRCS})
  ENDIF()
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEON_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFMA_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONV8_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEON_AARCH64_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFMA_AARCH64_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_FP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR AND XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS})
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_BF16)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONBF16_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_DOTPROD)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOT_MICROKERNEL_SRCS})
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ARM_I8MM)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONI8MM_AARCH64_MICROKERNEL_SRCS})
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONI8MM_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_ASSEMBLY)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${AARCH64_ASM_MICROKERNEL_SRCS})
    LIST(APPEND ALL_MICROKERNEL_SRCS ${AARCH64_ASM_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^x86(_64)?$")
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE2_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSSE3_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE41_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_F16C_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_FMA3_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX2_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512F_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512SKX_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VBMI_MICROKERNEL_SRCS})
  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VNNI_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_AVX512AMX)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512AMX_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX512FP16)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512FP16_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVXVNNI)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVXVNNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256SKX)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256SKX_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256VNNI)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256VNNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256VNNIGFNI)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX512VNNIGFNI)
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS})
  ENDIF()
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_SSE_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_SSE2_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_SSSE3_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_SSE41_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_F16C_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_FMA3_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX2_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512F_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512SKX_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512VBMI_MICROKERNEL_SRCS})
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512VNNI_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_AVX512AMX)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512AMX_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX512FP16)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512FP16_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVXVNNI)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVXVNNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256SKX)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX256SKX_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256VNNI)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX256VNNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX256VNNIGFNI)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_AVX512VNNIGFNI)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AVX512VNNIGFNI_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "Hexagon")
  LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_HEXAGON_MICROKERNEL_SRCS})
  IF(XNNPACK_ENABLE_HVX)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_HVX_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^ppc64")
  IF(XNNPACK_ENABLE_VSX)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_PPC64_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^riscv")
  LIST(APPEND PROD_MICROKERNEL_SRCS)
  IF(XNNPACK_ENABLE_RISCV_VECTOR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_RVV_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVV_MICROKERNEL_SRCS})
  ENDIF()
  IF(XNNPACK_ENABLE_RISCV_FP16_VECTOR)
    LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_RVVFP16ARITH_MICROKERNEL_SRCS})
    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVVFP16ARITH_MICROKERNEL_SRCS})
  ENDIF()
ENDIF()

IF (NOT DEFINED Python_EXECUTABLE)
  find_package(Python COMPONENTS Interpreter)

  IF(NOT Python_FOUND)
    SET(PYTHON_EXECUTABLE "python3")
  ENDIF()
ENDIF()

ADD_CUSTOM_COMMAND(
  OUTPUT "${PROJECT_BINARY_DIR}/build_identifier.c"
  COMMAND "${Python_EXECUTABLE}" "scripts/generate-build-identifier.py" --output "${PROJECT_BINARY_DIR}/build_identifier.c" ${PROD_MICROKERNEL_SRCS}
  DEPENDS ${PROD_MICROKERNEL_SRCS}
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

# Create a dummy library that contains shared dependencies and definitions for
# all other XNNPACK targets.
ADD_LIBRARY(xnnpack-base INTERFACE)

IF(XNNPACK_BUILD_ALL_MICROKERNELS)
  ADD_LIBRARY(microkernels-all OBJECT ${ALL_MICROKERNEL_SRCS} ${TABLE_SRCS})
ENDIF()
ADD_LIBRARY(microkernels-prod OBJECT ${PROD_MICROKERNEL_SRCS} ${TABLE_SRCS})
ADD_LIBRARY(hardware-config OBJECT src/configs/hardware-config.c)
ADD_LIBRARY(indirection OBJECT src/indirection.c)
ADD_LIBRARY(logging OBJECT ${LOGGING_SRCS})
ADD_LIBRARY(microparams-init OBJECT src/microparams-init.c)
ADD_LIBRARY(normalization OBJECT src/normalization.c)
ADD_LIBRARY(packing OBJECT src/packing.c)
TARGET_LINK_LIBRARIES(hardware-config PRIVATE xnnpack-base logging)
TARGET_LINK_LIBRARIES(indirection PRIVATE xnnpack-base)
TARGET_LINK_LIBRARIES(logging PRIVATE xnnpack-base)
IF(XNNPACK_BUILD_ALL_MICROKERNELS)
  TARGET_LINK_LIBRARIES(microkernels-all PRIVATE xnnpack-base logging)
ENDIF()
TARGET_LINK_LIBRARIES(microkernels-prod PRIVATE xnnpack-base logging)
TARGET_LINK_LIBRARIES(microparams-init PRIVATE xnnpack-base)
TARGET_LINK_LIBRARIES(normalization PRIVATE xnnpack-base)
TARGET_LINK_LIBRARIES(packing PRIVATE xnnpack-base logging)
IF(XNNPACK_BUILD_LIBRARY)
  ADD_LIBRARY(allocator OBJECT src/allocator.c)
  ADD_LIBRARY(cache OBJECT src/cache.c)
  ADD_LIBRARY(memory OBJECT src/memory.c)
  ADD_LIBRARY(microkernel-utils OBJECT src/microkernel-utils.c)
  ADD_LIBRARY(mutex OBJECT src/mutex.c)
  ADD_LIBRARY(operators OBJECT ${OPERATOR_SRCS})
  ADD_LIBRARY(operator-run OBJECT src/operator-run.c)
  ADD_LIBRARY(operator-utils OBJECT src/operator-utils.c)
  ADD_LIBRARY(subgraph OBJECT ${SUBGRAPH_SRCS})
  # Need C_EXTENSIONS to get constants for mmap (MAP_ANONYMOUS).
  SET_TARGET_PROPERTIES(memory PROPERTIES C_EXTENSIONS YES)
  IF(XNNPACK_LIBRARY_TYPE STREQUAL "default")
    ADD_LIBRARY(XNNPACK ${XNNPACK_SRCS})
  ELSEIF(XNNPACK_LIBRARY_TYPE STREQUAL "shared")
    ADD_LIBRARY(XNNPACK SHARED ${XNNPACK_SRCS})
  ELSEIF(XNNPACK_LIBRARY_TYPE STREQUAL "static")
    ADD_LIBRARY(XNNPACK STATIC ${XNNPACK_SRCS})
  ELSE()
    MESSAGE(FATAL_ERROR "Unsupported XNNPACK library type \"${XNNPACK_LIBRARY_TYPE}\". Must be \"static\", \"shared\", or \"default\"")
  ENDIF()

  TARGET_LINK_LIBRARIES(allocator PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(cache PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(memory PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(microkernel-utils PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(mutex PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(operators PRIVATE xnnpack-base allocator indirection logging microkernel-utils normalization operator-utils packing)
  TARGET_LINK_LIBRARIES(operator-run PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(operator-utils PRIVATE xnnpack-base logging)
  TARGET_LINK_LIBRARIES(subgraph PRIVATE xnnpack-base allocator logging memory mutex operators operator-run)
  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE allocator cache hardware-config indirection logging memory microkernel-utils microparams-init mutex normalization operators operator-run operator-utils packing microkernels-prod subgraph)
  TARGET_LINK_LIBRARIES(XNNPACK PUBLIC xnnpack-base)
  SET_TARGET_PROPERTIES(XNNPACK PROPERTIES C_EXTENSIONS YES)
ENDIF()
IF(NOT MSVC)
  SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-math-errno ")
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR STREQUAL "arm")
  SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
  SET_PROPERTY(SOURCE ${PROD_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
  SET_PROPERTY(SOURCE ${ALL_ARMSIMD32_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv6 -mfpu=vfp -munaligned-access ")
  SET_PROPERTY(SOURCE ${PROD_ARMSIMD32_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv6 -mfpu=vfp -munaligned-access ")
  SET_PROPERTY(SOURCE ${ALL_NEON_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon ")
  SET_PROPERTY(SOURCE ${PROD_NEON_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon ")
  SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-fp16 ")
  # GCC requires -mfp16-format=ieee to define __fp16 type, but Clang doesn't support this option at all.
  IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${PROD_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${PROD_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
  ENDIF()
  SET_PROPERTY(SOURCE ${ALL_NEONFMA_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-vfpv4 ")
  SET_PROPERTY(SOURCE ${PROD_NEONFMA_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-vfpv4 ")
  SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8-a -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${PROD_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8-a -mfpu=neon-fp-armv8 ")
  # -mfpu=fp-armv8 should suffice for FP16ARITH microkernels, if not for GCC emitting wrong directives for assembler
  # -fno-math-errno for the vsqrth_f16 polyfill using sqrtf
  # -ffinite-math-only for the vminnmh_f16/vmaxnmh_f16 polyfills using compare + select
  SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only ")
  SET_PROPERTY(SOURCE ${PROD_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only ")
  SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only ")
  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ALL_NEONI8MM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+i8mm+fp16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${PROD_NEONI8MM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+i8mm+fp16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 -mfpu=neon-fp-armv8 ")
  # Workground the neon detection bug in ARM v8
  # Related links:
  #   https://github.com/android/ndk/issues/910
  #   https://reviews.llvm.org/D58477
  IF(ANDROID_NDK_MAJOR AND ANDROID_NDK_MAJOR LESS 21)
    SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${PROD_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${PROD_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${PROD_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
    SET_PROPERTY(SOURCE ${AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^arm64" AND NOT MSVC)
  SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOTFP16ARITH_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod+fp16 ")
  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 ")
  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
  SET_PROPERTY(SOURCE ${ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
  SET_PROPERTY(SOURCE ${PROD_NEONDOT_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
  SET_PROPERTY(SOURCE ${ALL_NEONI8MM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+i8mm+fp16 ")
  SET_PROPERTY(SOURCE ${PROD_NEONI8MM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+i8mm+fp16 ")
  SET_PROPERTY(SOURCE ${AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16+dotprod ")
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^ppc64")
  IF(XNNPACK_ENABLE_VSX)
    SET_PROPERTY(SOURCE ${ALL_PPC_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mvsx ")
  ENDIF()
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^riscv")
  IF(XNNPACK_ENABLE_RISCV_VECTOR)
    SET_PROPERTY(SOURCE ${ALL_RVV_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=rv64gcv -mabi=lp64d ")
    SET_PROPERTY(SOURCE ${PROD_RVV_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=rv64gcv -mabi=lp64d ")
  ENDIF()
  SET_PROPERTY(SOURCE ${ALL_RVVFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=rv64gc_zvfh -mabi=lp64d ")
  SET_PROPERTY(SOURCE ${PROD_RVVFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=rv64gc_zvfh -mabi=lp64d ")
ENDIF()
IF(XNNPACK_TARGET_PROCESSOR MATCHES "^x86(_64)?$")
  IF(MSVC)
    IF(XNNPACK_TARGET_PROCESSOR STREQUAL "x86" OR CMAKE_SIZEOF_VOID_P EQUAL 4)
      SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE ")
      SET_PROPERTY(SOURCE ${PROD_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE ")
      SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
      SET_PROPERTY(SOURCE ${PROD_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
      SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
      SET_PROPERTY(SOURCE ${PROD_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
      SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
      SET_PROPERTY(SOURCE ${PROD_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE2 ")
    ENDIF()
    SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${PROD_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${PROD_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${PROD_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX ")
    SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX2 ")
    SET_PROPERTY(SOURCE ${PROD_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX2 ")
    SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX2 ")
    SET_PROPERTY(SOURCE ${PROD_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX2 ")
    SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    SET_PROPERTY(SOURCE ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:AVX512 ")
    IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
      SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse -clang:-mno-sse2 ")
      SET_PROPERTY(SOURCE ${PROD_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse -clang:-mno-sse2 ")
      SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse2 -clang:-mno-sse3 ")
      SET_PROPERTY(SOURCE ${PROD_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse2 -clang:-mno-sse3 ")
      SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mssse3 -clang:-mno-sse4.1 ")
      SET_PROPERTY(SOURCE ${PROD_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mssse3 -clang:-mno-sse4.1 ")
      SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse4.1 -clang:-mno-sse4.2 ")
      SET_PROPERTY(SOURCE ${PROD_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-msse4.1 -clang:-mno-sse4.2 ")
      SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mavx -clang:-mno-avx2 -clang:-mno-fma -clang:-mno-f16c ")
      SET_PROPERTY(SOURCE ${PROD_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mavx -clang:-mno-avx2 -clang:-mno-fma -clang:-mno-f16c ")
      SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mno-avx2 -clang:-mno-fma ")
      SET_PROPERTY(SOURCE ${PROD_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mno-avx2 -clang:-mno-fma ")
      SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mno-avx2 ")
      SET_PROPERTY(SOURCE ${PROD_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mno-avx2 ")
      SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx2 ")
      SET_PROPERTY(SOURCE ${PROD_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx2 ")
      SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx2 -clang:-mavxvnni ")
      SET_PROPERTY(SOURCE ${PROD_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx2 -clang:-mavxvnni ")
      SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl ")
      SET_PROPERTY(SOURCE ${PROD_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl ")
      SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni ")
      SET_PROPERTY(SOURCE ${PROD_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni ")
      SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni ")
      SET_PROPERTY(SOURCE ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni ")
      SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mavx512f ")
      SET_PROPERTY(SOURCE ${PROD_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -clang:-mavx512f ")
      SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl ")
      SET_PROPERTY(SOURCE ${PROD_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl ")
      SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vbmi ")
      SET_PROPERTY(SOURCE ${PROD_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vbmi ")
      SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni ")
      SET_PROPERTY(SOURCE ${PROD_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni ")
      SET_PROPERTY(SOURCE ${ALL_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni ")
      SET_PROPERTY(SOURCE ${PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni ")
      SET_PROPERTY(SOURCE ${ALL_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mavx512fp16 ")
      SET_PROPERTY(SOURCE ${PROD_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mavx512fp16 ")
      SET_PROPERTY(SOURCE ${ALL_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mamx-tile -clang:-mamx-int8 ")
      SET_PROPERTY(SOURCE ${PROD_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mamx-tile -clang:-mamx-int8 ")
    ENDIF()
  ELSE()
    SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse -mno-sse2 ")
    SET_PROPERTY(SOURCE ${PROD_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse -mno-sse2 ")
    SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse2 -mno-sse3 ")
    SET_PROPERTY(SOURCE ${PROD_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse2 -mno-sse3 ")
    SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mssse3 -mno-sse4.1 ")
    SET_PROPERTY(SOURCE ${PROD_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mssse3 -mno-sse4.1 ")
    SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse4.1 -mno-sse4.2 ")
    SET_PROPERTY(SOURCE ${PROD_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse4.1 -mno-sse4.2 ")
    SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mavx -mno-avx2 -mno-fma -mno-f16c ")
    SET_PROPERTY(SOURCE ${PROD_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mavx -mno-avx2 -mno-fma -mno-f16c ")
    SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mno-avx2 -mno-fma ")
    SET_PROPERTY(SOURCE ${PROD_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mno-avx2 -mno-fma ")
    SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mfma -mno-avx2 ")
    SET_PROPERTY(SOURCE ${PROD_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mfma -mno-avx2 ")
    SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx2 ")
    SET_PROPERTY(SOURCE ${PROD_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx2 ")
    SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx2 -mavxvnni ")
    SET_PROPERTY(SOURCE ${PROD_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx2 -mavxvnni ")
    SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl ")
    SET_PROPERTY(SOURCE ${PROD_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl ")
    SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni ")
    SET_PROPERTY(SOURCE ${PROD_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni  ")
    SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni ")
    SET_PROPERTY(SOURCE ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni ")
    SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mavx512f ")
    SET_PROPERTY(SOURCE ${PROD_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mavx512f ")
    SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl ")
    SET_PROPERTY(SOURCE ${PROD_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl ")
    SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi ")
    SET_PROPERTY(SOURCE ${PROD_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi ")
    SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni ")
    SET_PROPERTY(SOURCE ${PROD_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni  ")
    SET_PROPERTY(SOURCE ${ALL_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni ")
    SET_PROPERTY(SOURCE ${PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni ")
    SET_PROPERTY(SOURCE ${ALL_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mavx512fp16 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mavx512fp16 ")
    SET_PROPERTY(SOURCE ${ALL_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mamx-tile -mamx-int8 ")
    SET_PROPERTY(SOURCE ${PROD_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS " -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mamx-tile -mamx-int8 ")
    IF(MINGW OR CMAKE_SYSTEM_NAME MATCHES "^(CYGWIN|MSYS)$")
      # Work-around for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65782
      SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
      SET_PROPERTY(SOURCE ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-asynchronous-unwind-tables ")
    ENDIF()
  ENDIF()
ENDIF()

# Set `XNN_LOG_LEVEL` transitively for all targets that depend on `logging`.
TARGET_COMPILE_DEFINITIONS(logging PUBLIC "XNN_LOG_LEVEL=$<$<CONFIG:Debug>:4>$<$<NOT:$<CONFIG:Debug>>:0>")

IF(MSVC)
  # Even though MSVC has __restrict, it can't be used in all the same contexts as the C99 restrict keyword
  TARGET_COMPILE_DEFINITIONS(xnnpack-base INTERFACE "restrict=")

  IF(XNNPACK_BUILD_ALL_MICROKERNELS)
    TARGET_COMPILE_OPTIONS(microkernels-all PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  ENDIF()
  TARGET_COMPILE_OPTIONS(microkernels-prod PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  TARGET_COMPILE_OPTIONS(hardware-config PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  TARGET_COMPILE_OPTIONS(indirection PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  TARGET_COMPILE_OPTIONS(microparams-init PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  TARGET_COMPILE_OPTIONS(normalization PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
  TARGET_COMPILE_OPTIONS(packing PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
  IF(XNNPACK_BUILD_LIBRARY)
    TARGET_COMPILE_OPTIONS(microkernel-utils PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
    TARGET_COMPILE_OPTIONS(operator-run PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
    TARGET_COMPILE_OPTIONS(operator-utils PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O2>")
    TARGET_COMPILE_OPTIONS(cache PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
    TARGET_COMPILE_OPTIONS(mutex PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
    TARGET_COMPILE_OPTIONS(subgraph PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
    TARGET_COMPILE_OPTIONS(operators PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
    TARGET_COMPILE_OPTIONS(XNNPACK PRIVATE "$<$<NOT:$<CONFIG:Debug>>:/O1>")
  ENDIF()
ELSE()
  TARGET_COMPILE_OPTIONS(xnnpack-base INTERFACE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  IF(XNNPACK_BUILD_ALL_MICROKERNELS)
    TARGET_COMPILE_OPTIONS(microkernels-all PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  ENDIF()
  TARGET_COMPILE_OPTIONS(microkernels-prod PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  TARGET_COMPILE_OPTIONS(hardware-config PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  TARGET_COMPILE_OPTIONS(indirection PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  TARGET_COMPILE_OPTIONS(microparams-init PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  TARGET_COMPILE_OPTIONS(normalization PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
  TARGET_COMPILE_OPTIONS(packing PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
  IF(XNNPACK_BUILD_LIBRARY)
    TARGET_COMPILE_OPTIONS(microkernel-utils PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
    TARGET_COMPILE_OPTIONS(operator-run PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
    TARGET_COMPILE_OPTIONS(operator-utils PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O2>")
    TARGET_COMPILE_OPTIONS(cache PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
    TARGET_COMPILE_OPTIONS(mutex PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
    TARGET_COMPILE_OPTIONS(subgraph PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
    TARGET_COMPILE_OPTIONS(operators PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
    TARGET_COMPILE_OPTIONS(XNNPACK PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-Os>")
  ENDIF()
ENDIF()

IF(XNNPACK_BUILD_ALL_MICROKERNELS)
  TARGET_INCLUDE_DIRECTORIES(microkernels-all PRIVATE include src)
ENDIF()
TARGET_INCLUDE_DIRECTORIES(microkernels-prod PRIVATE include src)
TARGET_INCLUDE_DIRECTORIES(hardware-config PRIVATE include src ${CPUINFO_SOURCE_DIR}/include)
TARGET_INCLUDE_DIRECTORIES(indirection PRIVATE include src)
TARGET_INCLUDE_DIRECTORIES(microparams-init PRIVATE src)
TARGET_INCLUDE_DIRECTORIES(normalization PRIVATE include src)
TARGET_INCLUDE_DIRECTORIES(packing PRIVATE include src)
TARGET_INCLUDE_DIRECTORIES(logging PRIVATE include src)
IF(XNNPACK_BUILD_LIBRARY)
  TARGET_INCLUDE_DIRECTORIES(XNNPACK PUBLIC include)
  TARGET_INCLUDE_DIRECTORIES(XNNPACK PRIVATE src)
  TARGET_INCLUDE_DIRECTORIES(allocator PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(cache PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(microkernel-utils PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(subgraph PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(operators PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(operator-run PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(operator-utils PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(memory PRIVATE include src)
  TARGET_INCLUDE_DIRECTORIES(mutex PRIVATE include src)
  IF(WIN32)
    # Target Windows 7+ API
    TARGET_COMPILE_DEFINITIONS(XNNPACK PRIVATE _WIN32_WINNT=0x0601)
    TARGET_COMPILE_DEFINITIONS(mutex PRIVATE _WIN32_WINNT=0x0601)
  ENDIF()
  SET_PROPERTY(TARGET XNNPACK PROPERTY PUBLIC_HEADER include/xnnpack.h include/experiments-config.h)
ENDIF()

# ---[ Find libm
FIND_LIBRARY(LIBM m)
IF(LIBM)
  IF(XNNPACK_BUILD_ALL_MICROKERNELS)
    TARGET_LINK_LIBRARIES(microkernels-all PRIVATE ${LIBM})
  ENDIF()
  TARGET_LINK_LIBRARIES(microkernels-prod PRIVATE ${LIBM})
  TARGET_LINK_LIBRARIES(hardware-config PRIVATE ${LIBM})
  TARGET_LINK_LIBRARIES(indirection PRIVATE ${LIBM})
  TARGET_LINK_LIBRARIES(subgraph PRIVATE ${LIBM})
  IF(XNNPACK_BUILD_LIBRARY)
    TARGET_LINK_LIBRARIES(XNNPACK PRIVATE ${LIBM})
  ENDIF()
ENDIF()

# ---[ Configure cpuinfo
IF(NOT TARGET cpuinfo)
  IF(NOT XNNPACK_USE_SYSTEM_LIBS)
    SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL "")
    SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL "")
    SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL "")
    SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL "")
    ADD_SUBDIRECTORY(
      "${CPUINFO_SOURCE_DIR}"
      "${CMAKE_BINARY_DIR}/cpuinfo")
  ELSE()
    ADD_LIBRARY(cpuinfo SHARED IMPORTED)
    FIND_LIBRARY(CPUINFO_LIBRARY cpuinfo PATHS "${CPUINFO_SOURCE_DIR}/lib")
    IF(NOT CPUINFO_LIBRARY)
      MESSAGE(FATAL_ERROR "Cannot find cpuinfo")
    ENDIF()
    TARGET_INCLUDE_DIRECTORIES(cpuinfo INTERFACE "${CPUINFO_SOURCE_DIR}/include")
    SET_PROPERTY(TARGET cpuinfo PROPERTY IMPORTED_LOCATION "${CPUINFO_LIBRARY}")
    SET_PROPERTY(TARGET cpuinfo PROPERTY IMPORTED_IMPLIB "${CPUINFO_LIBRARY}")
  ENDIF()
ENDIF()
IF(XNNPACK_BUILD_LIBRARY)
  TARGET_LINK_LIBRARIES(hardware-config PRIVATE cpuinfo)
  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE cpuinfo)
ENDIF()

# ---[ Configure pthreadpool
IF(NOT TARGET pthreadpool)
  IF(NOT XNNPACK_USE_SYSTEM_LIBS)
    SET(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL "")
    SET(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL "")
    SET(PTHREADPOOL_ALLOW_DEPRECATED_API OFF CACHE BOOL "")
    ADD_SUBDIRECTORY(
      "${PTHREADPOOL_SOURCE_DIR}"
      "${CMAKE_BINARY_DIR}/pthreadpool")
  ELSE()
    ADD_LIBRARY(pthreadpool SHARED IMPORTED)
    FIND_LIBRARY(PTHREADPOOL_LIBRARY pthreadpool PATHS "${PTHREADPOOL_SOURCE_DIR}/lib")
    IF(NOT PTHREADPOOL_LIBRARY)
      MESSAGE(FATAL_ERROR "Cannot find pthreadpool")
    ENDIF()
    FIND_PACKAGE(Threads REQUIRED)
    TARGET_INCLUDE_DIRECTORIES(pthreadpool INTERFACE "${PTHREADPOOL_SOURCE_DIR}/include")
    TARGET_LINK_LIBRARIES(pthreadpool INTERFACE Threads::Threads)
    SET_PROPERTY(TARGET pthreadpool PROPERTY IMPORTED_LOCATION "${PTHREADPOOL_LIBRARY}")
    SET_PROPERTY(TARGET pthreadpool PROPERTY IMPORTED_IMPLIB "${PTHREADPOOL_LIBRARY}")
  ENDIF()
ENDIF()
TARGET_LINK_LIBRARIES(xnnpack-base INTERFACE pthreadpool)

# ---[ Configure FXdiv
IF(NOT TARGET fxdiv)
  IF(NOT XNNPACK_USE_SYSTEM_LIBS)
    SET(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
    SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
    ADD_SUBDIRECTORY(
      "${FXDIV_SOURCE_DIR}"
      "${CMAKE_BINARY_DIR}/FXdiv")
  ELSE()
    FIND_FILE(FXDIV_HDR fxdiv.h PATH_SUFFIXES include PATHS "${FXDIV_SOURCE_DIR}")
    IF(NOT FXDIV_HDR)
      MESSAGE(FATAL_ERROR "Cannot find fxdiv")
    ENDIF()
    ADD_LIBRARY(fxdiv STATIC "${FXDIV_HDR}")
    TARGET_INCLUDE_DIRECTORIES(fxdiv INTERFACE "${FXDIV_SOURCE_DIR}/include")
    SET_PROPERTY(TARGET fxdiv PROPERTY LINKER_LANGUAGE C)
  ENDIF()
ENDIF()
IF(XNNPACK_BUILD_ALL_MICROKERNELS)
  TARGET_LINK_LIBRARIES(microkernels-all PRIVATE fxdiv)
ENDIF()
TARGET_LINK_LIBRARIES(microkernels-prod PRIVATE fxdiv)
TARGET_LINK_LIBRARIES(indirection PRIVATE fxdiv)
IF(XNNPACK_BUILD_LIBRARY)
  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE fxdiv)
ENDIF()

# ---[ Configure FP16
IF(NOT TARGET fp16)
  IF(NOT XNNPACK_USE_SYSTEM_LIBS)
    SET(FP16_BUILD_TESTS OFF CACHE BOOL "")
    SET(FP16_BUILD_BENCHMARKS OFF CACHE BOOL "")
    ADD_SUBDIRECTORY(
      "${FP16_SOURCE_DIR}"
      "${CMAKE_BINARY_DIR}/FP16")
  ELSE()
    FIND_FILE(FP16_HDR fp16.h PATH_SUFFIXES include PATHS "${FP16_SOURCE_DIR}")
    IF(NOT FP16_HDR)
      MESSAGE(FATAL_ERROR "Cannot find fp16")
    ENDIF()
    ADD_LIBRARY(fp16 STATIC "${FP16_HDR}")
    TARGET_INCLUDE_DIRECTORIES(fp16 INTERFACE "${FP16_SOURCE_DIR}/include")
    SET_PROPERTY(TARGET fp16 PROPERTY LINKER_LANGUAGE C)
  ENDIF()
ENDIF()
IF(XNNPACK_BUILD_ALL_MICROKERNELS)
  TARGET_LINK_LIBRARIES(microkernels-all PRIVATE fp16)
ENDIF()
TARGET_LINK_LIBRARIES(microkernels-prod PRIVATE fp16)
TARGET_LINK_LIBRARIES(microparams-init PRIVATE fp16)
TARGET_LINK_LIBRARIES(packing PRIVATE fp16)
TARGET_LINK_LIBRARIES(indirection PRIVATE fp16)
IF(XNNPACK_BUILD_LIBRARY)
  TARGET_LINK_LIBRARIES(subgraph PRIVATE fp16)
  TARGET_LINK_LIBRARIES(operators PRIVATE fp16)
  TARGET_LINK_LIBRARIES(operator-run PRIVATE fp16)

  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE fp16)
  INSTALL(TARGETS XNNPACK
      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
ENDIF()

# ---[ Configure KleidiAI
IF(XNNPACK_ENABLE_KLEIDIAI)
  IF(NOT TARGET kleidiai)
    IF(NOT XNNPACK_USE_SYSTEM_LIBS)
      SET(KLEIDIAI_BUILD_TESTS OFF CACHE BOOL "")
      ADD_SUBDIRECTORY(
        "${KLEIDIAI_SOURCE_DIR}"
        "${CMAKE_BINARY_DIR}/kleidiai")
    ELSE()
      ADD_LIBRARY(kleidiai SHARED IMPORTED)
      FIND_LIBRARY(KLEIDIAI_LIBRARY kleidiai PATHS "${KLEIDIAI_SOURCE_DIR}/lib")
      IF(NOT KLEIDIAI_LIBRARY)
        MESSAGE(FATAL_ERROR "Cannot find KleidiAI")
      ENDIF()
      TARGET_INCLUDE_DIRECTORIES(kleidiai INTERFACE "${KLEIDIAI_SOURCE_DIR}")
      SET_PROPERTY(TARGET kleidiai PROPERTY IMPORTED_LOCATION "${KLEIDIAI_LIBRARY}")
      SET_PROPERTY(TARGET kleidiai PROPERTY IMPORTED_IMPLIB "${KLEIDIAI_LIBRARY}")
    ENDIF()
  ENDIF()
  TARGET_LINK_LIBRARIES(xnnpack-base INTERFACE kleidiai)
ENDIF()

# ---[ XNNPACK unit tests
IF(XNNPACK_BUILD_TESTS)
  # ---[ Macro to shard a test.
  MACRO(ADD_SHARDED_TEST TEST_NAME NUM_SHARDS)
    math(EXPR NUM_SHARDS_MINUS_ONE "${NUM_SHARDS} - 1")
    FOREACH(SHARD RANGE 0 ${NUM_SHARDS_MINUS_ONE})
      ADD_TEST(NAME ${TEST_NAME}-${SHARD} COMMAND ${TEST_NAME})
      SET_PROPERTY(
          TEST ${TEST_NAME}-${SHARD}
            APPEND
            PROPERTY ENVIRONMENT "GTEST_TOTAL_SHARDS=${NUM_SHARDS};"
                    "GTEST_SHARD_INDEX=${SHARD}")
    ENDFOREACH()
  ENDMACRO()

  # ---[ Build google test
  IF(NOT TARGET gtest)
    IF(XNNPACK_USE_SYSTEM_LIBS)
      FIND_PACKAGE(GTest REQUIRED)
    ELSE()
      SET(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
      ADD_SUBDIRECTORY(
        "${GOOGLETEST_SOURCE_DIR}"
        "${CMAKE_BINARY_DIR}/googletest")
    ENDIF()
  ENDIF()

  # Helper libraries
  ADD_LIBRARY(next-prime STATIC test/next_prime.cc)

  ADD_LIBRARY(gemm-microkernel-tester STATIC test/gemm-microkernel-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(gemm-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE xnnpack-base  fp16 pthreadpool GTest::gtest)
  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE packing)
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE kleidiai)
  ENDIF()
  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PUBLIC next-prime)

  ADD_LIBRARY(unary-operator-tester STATIC test/unary-operator-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(unary-operator-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(unary-operator-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)

  ADD_LIBRARY(binary-elementwise-operator-tester STATIC test/binary-elementwise-operator-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(binary-elementwise-operator-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(binary-elementwise-operator-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)

  ADD_LIBRARY(dwconv-microkernel-tester STATIC test/dwconv-microkernel-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(dwconv-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(dwconv-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)
  TARGET_LINK_LIBRARIES(dwconv-microkernel-tester PUBLIC next-prime)

  ADD_LIBRARY(vbinary-microkernel-tester STATIC test/vbinary-microkernel-tester.cc)
  SET_TARGET_PROPERTIES(vbinary-microkernel-tester PROPERTIES CXX_EXTENSIONS YES)
  TARGET_INCLUDE_DIRECTORIES(vbinary-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(vbinary-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)

  ADD_LIBRARY(vbinaryc-microkernel-tester STATIC test/vbinaryc-microkernel-tester.cc)
  SET_TARGET_PROPERTIES(vbinaryc-microkernel-tester PROPERTIES CXX_EXTENSIONS YES)
  TARGET_INCLUDE_DIRECTORIES(vbinaryc-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(vbinaryc-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)

  ADD_LIBRARY(vcvt-microkernel-tester STATIC test/vcvt-microkernel-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(vcvt-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(vcvt-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)

  ADD_LIBRARY(vunary-microkernel-tester STATIC test/vunary-microkernel-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(vunary-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(vunary-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool GTest::gtest)
  TARGET_LINK_LIBRARIES(vunary-microkernel-tester PUBLIC next-prime)

  ADD_LIBRARY(convolution-test-helpers OBJECT test/convolution-test-helpers.cc)
  TARGET_INCLUDE_DIRECTORIES(convolution-test-helpers PRIVATE include src)
  TARGET_LINK_LIBRARIES(convolution-test-helpers PRIVATE xnnpack-base fp16)

  ADD_LIBRARY(packq-microkernel-tester STATIC test/packq-microkernel-tester.cc)
  TARGET_INCLUDE_DIRECTORIES(packq-microkernel-tester PRIVATE . include src test)
  TARGET_LINK_LIBRARIES(packq-microkernel-tester PRIVATE XNNPACK fp16 pthreadpool  GTest::gtest)
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(packq-microkernel-tester PRIVATE kleidiai)
  ENDIF()

  # ---[ Launch heavy tests first.
  SET(SHARDED_TESTS
    f32-avgpool-minmax
    f32-maxpool-minmax
    f32-pavgpool-minmax
    f32-vclamp
    f32-vlrelu
  )
  FOREACH(TEST ${SHARDED_TESTS})
    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)
    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE fp16 pthreadpool GTest::gtest GTest::gtest_main)
    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK vunary-microkernel-tester next-prime hardware-config logging microkernels-all microparams-init)
    ADD_SHARDED_TEST(${TEST}-test 10)
  ENDFOREACH()

  IF(XNNPACK_BUILD_LIBRARY)
    # ---[ Launch heavy tests first.
    SET(LIBRARY_SHARDED_TESTS
      batch-matrix-multiply-nc
      batch-matrix-multiply
      deconvolution-nhwc
      fully-connected
      scaled-dot-product-attention
    )
    FOREACH(TEST ${LIBRARY_SHARDED_TESTS})
      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)
      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK fp16 GTest::gmock GTest::gtest GTest::gtest_main)
      ADD_SHARDED_TEST(${TEST}-test 10)
    ENDFOREACH()

    # ---[ Build size tests
    ADD_EXECUTABLE(operator-size-test test/operator-size.c)
    TARGET_LINK_LIBRARIES(operator-size-test PRIVATE XNNPACK)

    ADD_EXECUTABLE(subgraph-size-test test/subgraph-size.c)
    TARGET_LINK_LIBRARIES(subgraph-size-test PRIVATE XNNPACK)

    # ---[ Build operator-level unit tests
    SET(LIBRARY_UNARY_TESTS
        abs-nc
        bankers-rounding-nc
        ceiling-nc
        clamp-nc
        elu-nc
        exp-nc
        floor-nc
        hardswish-nc
        leaky-relu-nc
        log-nc
        negate-nc
        reciprocal-square-root-nc
        sigmoid-nc
        square-nc
        square-root-nc
        tanh-nc
        truncation-nc
        unpooling-nhwc)

    FOREACH(TEST ${LIBRARY_UNARY_TESTS})
      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)
      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK unary-operator-tester fp16 GTest::gtest GTest::gtest_main)
      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
    ENDFOREACH()

    SET(LIBRARY_BINARY_ELEMENTWISE_TESTS
        add-nd
        add-nd-eager
        copysign-nd
        divide-nd
        divide-nd-eager
        maximum-nd
        maximum-nd-eager
        minimum-nd
        minimum-nd-eager
        multiply-nd
        multiply-nd-eager
        squared-difference-nd
        squared-difference-nd-eager
        subtract-nd
        subtract-nd-eager)

    FOREACH(TEST ${LIBRARY_BINARY_ELEMENTWISE_TESTS})
      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)
      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK binary-elementwise-operator-tester fp16 GTest::gtest GTest::gtest_main)
      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
    ENDFOREACH()

    # ---[ Build subgraph optimizations unit tests
    SET(LIBRARY_SUBGRAPH_OPTIMIZATION_TESTS
        fusion
        memory-planner
        subgraph-fp16
        subgraph
        runtime
        subgraph-nchw
        workspace)

    FOREACH(TEST ${LIBRARY_SUBGRAPH_OPTIMIZATION_TESTS})
      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)
      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK GTest::gmock GTest::gtest GTest::gtest_main fp16)
      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
    ENDFOREACH()

    # ---[ Build subgraph-level unit tests
    SET(LIBRARY_SUBGRAPH_UNIT_TESTS
        abs
        abs-reshape
        add2
        add2-reshape
        argmax-pooling-2d
        average-pooling-2d
        average-pooling-2d-reshape
        bankers-rounding
        ceiling
        clamp
        concatenate2
        concatenate3
        concatenate4
        concatenate5
        convert
        convolution-2d
        copy
        copysign
        deconvolution-2d
        depth-to-space-2d
        depthwise-convolution-2d
        divide2
        elu
        gelu
        exp
        even-split2
        even-split3
        even-split4
        floor
        global-average-pooling-1d
        global-average-pooling-2d
        global-sum-pooling-1d
        global-sum-pooling-2d
        hardswish
        leaky-relu
        log
        max-pooling-2d
        maximum2
        minimum2
        multiply2
        negate
        prelu
        reciprocal-square-root
        reshape-helpers
        sigmoid
        static-slice
        softmax
        space-to-depth-2d
        square
        square-root
        squared-difference
        static-constant-pad
        static-mean
        static-reshape
        static-resize-bilinear-2d
        static-transpose
        subtract2
        tanh
        transpose-reshape
        unpooling-2d)

    FOREACH(TEST ${LIBRARY_SUBGRAPH_UNIT_TESTS})
      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)
      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE XNNPACK GTest::gmock GTest::gtest GTest::gtest_main fp16 subgraph convolution-test-helpers)
      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
    ENDFOREACH()
  ENDIF()

  # ---[ Normalization unit tests
  SET(NORMALIZATION_UNIT_TESTS
      slice-normalization
      reduce-normalization
      transpose-normalization)

  FOREACH(TEST ${NORMALIZATION_UNIT_TESTS})
    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)
    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE GTest::gtest GTest::gtest_main pthreadpool normalization)
    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
  ENDFOREACH()

  # ---[ Build microkernel-level unit tests
  SET(MICROKERNEL_UNIT_TESTS
    bf16-gemm-minmax
    bf16-vabs
    cs16-bfly4
    cs16-fftr
    cs16-vsquareabs
    f16-avgpool-minmax
    f16-conv-hwc2chw
    f16-dwconv-minmax-multipass
    f16-dwconv-minmax-unipass
    f16-dwconv2d-chw
    f16-f32-vcvt
    f16-f32acc-gemm-minmax
    f16-f32acc-igemm-minmax
    f16-f32acc-rdsum
    f16-f32acc-rsum
    f16-gavgpool-cw
    f16-gavgpool-minmax
    f16-gemm-minmax
    f16-ibilinear-chw
    f16-ibilinear
    f16-igemm-minmax
    f16-maxpool-minmax
    f16-pavgpool-minmax
    f16-prelu
    f16-raddstoreexpminusmax
    f16-rmax
    f16-rsum
    f16-spmm-minmax
    f16-vabs
    f16-vadd-minmax
    f16-vaddc-minmax
    f16-vclamp
    f16-vcmul
    f16-vdiv-minmax
    f16-vdivc-minmax
    f16-velu
    f16-vhswish
    f16-vlrelu
    f16-vmax
    f16-vmaxc
    f16-vmin
    f16-vminc
    f16-vmul-minmax
    f16-vmulc-minmax
    f16-vmulcaddc-minmax
    f16-vneg
    f16-vrdivc-minmax
    f16-vrndd
    f16-vrndne
    f16-vrndu
    f16-vrndz
    f16-vrsqrt
    f16-vrsubc-minmax
    f16-vsigmoid
    f16-vsqr
    f16-vsqrdiff
    f16-vsqrdiffc
    f16-vsqrt
    f16-vsub-minmax
    f16-vsubc-minmax
    f16-vtanh
    f32-argmaxpool
    f32-conv-hwc
    f32-conv-hwc2chw
    f32-dwconv-minmax-multipass
    f32-dwconv-minmax-unipass
    f32-dwconv-multipass
    f32-dwconv-unipass
    f32-dwconv2d-chw
    f32-f16-vcvt
    f32-gavgpool-cw
    f32-gavgpool-minmax
    f32-gemm-goi-minmax
    f32-gemm-minmax
    f32-gemm-relu
    f32-gemm
    f32-gemminc-minmax
    f32-ibilinear-chw
    f32-ibilinear
    f32-igemm-minmax
    f32-igemm-relu
    f32-igemm
    f32-ppmm-minmax
    f32-prelu
    f32-qc4w-gemm-minmax
    f32-qc8w-gemm-minmax
    f32-qc8w-gemm-relu
    f32-qc8w-gemm
    f32-qs8-vcvt
    f32-qu8-vcvt
    f32-raddexpminusmax
    f32-raddextexp
    f32-raddstoreexpminusmax
    f32-rdsum
    f32-rmax
    f32-rmin
    f32-rminmax
    f32-rsum
    f32-spmm-minmax
    f32-vabs
    f32-vadd-minmax
    f32-vadd-relu
    f32-vadd
    f32-vaddc-minmax
    f32-vaddc-relu
    f32-vaddc
    f32-vcmul
    f32-vcopysign
    f32-vcopysignc
    f32-vdiv-minmax
    f32-vdiv-relu
    f32-vdiv
    f32-vdivc-minmax
    f32-vdivc-relu
    f32-vdivc
    f32-velu
    f32-vexp
    f32-vgelu
    f32-vhswish
    f32-vlog
    f32-vmax
    f32-vmaxc
    f32-vmin
    f32-vminc
    f32-vmul-minmax
    f32-vmul-relu
    f32-vmul
    f32-vmulc-minmax
    f32-vmulc-relu
    f32-vmulc
    f32-vmulcaddc-minmax
    f32-vneg
    f32-vrcopysignc
    f32-vrdivc-minmax
    f32-vrdivc-relu
    f32-vrdivc
    f32-vrelu
    f32-vrndd
    f32-vrndne
    f32-vrndu
    f32-vrndz
    f32-vrsqrt
    f32-vrsubc-minmax
    f32-vrsubc-relu
    f32-vrsubc
    f32-vscaleexpminusmax
    f32-vscaleextexp
    f32-vsigmoid
    f32-vsqr
    f32-vsqrdiff
    f32-vsqrdiffc
    f32-vsqrt
    f32-vsub-minmax
    f32-vsub-relu
    f32-vsub
    f32-vsubc-minmax
    f32-vsubc-relu
    f32-vsubc
    f32-vtanh
    i16-vlshift
    indirection
    packing
    qd8-f16-qb4w-gemm-minmax
    qd8-f16-qc4w-gemm-minmax
    qd8-f16-qc8w-gemm-minmax
    qd8-f32-qb4w-gemm-minmax
    qd8-f32-qc4w-gemm-minmax
    qd8-f32-qc8w-gemm-minmax
    qd8-f32-qc8w-igemm-minmax
    qp8-f32-qc4w-gemm-minmax
    qs16-qs8-vcvt
    qs8-dwconv-minmax-multipass-fp32
    qs8-dwconv-minmax-multipass-rndnu
    qs8-dwconv-minmax-unipass-fp32
    qs8-dwconv-minmax-unipass-rndnu
    qs8-f16-vcvt
    qs8-f32-vcvt
    qs8-gavgpool-minmax-fp32
    qs8-gavgpool-minmax-rndnu
    qs8-qc8w-dwconv-minmax-multipass-fp32
    qs8-qc8w-dwconv-minmax-unipass-fp32
    qs8-qc8w-gemm-minmax-fp32
    qs8-qc8w-igemm-minmax-fp32
    qs8-requantization
    qs8-rdsum-minmax-fp32
    qs8-rsum
    qs8-vadd-minmax
    qs8-vaddc-minmax
    qs8-vcvt
    qs8-vhswish
    qs8-vlrelu
    qs8-vmul-minmax-fp32
    qs8-vmulc-minmax-fp32
    qu8-avgpool-minmax-fp32
    qu8-dwconv-minmax-multipass-fp32
    qu8-dwconv-minmax-multipass-rndnu
    qu8-dwconv-minmax-unipass-fp32
    qu8-dwconv-minmax-unipass-rndnu
    qu8-f32-vcvt
    qu8-gavgpool-minmax-fp32
    qu8-gavgpool-minmax-rndnu
    qu8-gemm-minmax-fp32
    qu8-gemm-minmax-rndnu
    qu8-igemm-minmax-fp32
    qu8-igemm-minmax-rndnu
    qu8-requantization
    qu8-vadd-minmax
    qu8-vaddc-minmax
    qu8-vcvt
    qu8-vhswish
    qu8-vlrelu
    qu8-vmul-minmax-fp32
    qu8-vmul-minmax-rndnu
    qu8-vmulc-minmax-fp32
    qu8-vmulc-minmax-rndnu
    s16-rmaxabs
    s16-window
    s32-vmul
    s32-vmulc
    s8-ibilinear
    s8-maxpool-minmax
    s8-vclamp
    u32-filterbank-accumulate
    u32-filterbank-subtract
    u32-vlog
    u8-ibilinear
    u8-lut32norm
    u8-maxpool-minmax
    u8-rmax
    u8-vclamp
    x16-packw
    x16-transpose
    x24-transpose
    x32-packb
    x32-packw
    x32-packx
    x32-transpose
    x32-unpool
    x32-zerob
    x32-zip
    x64-transpose
    x8-lut
    x8-packq
    x8-packw
    x8-transpose
    x8-zip
    xx-fill
    xx-pad
    xx-transposev)

  FOREACH(TEST ${MICROKERNEL_UNIT_TESTS})
    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)
    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)
    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE
        dwconv-microkernel-tester
        fp16
        gemm-microkernel-tester
        GTest::gmock
        GTest::gtest
        GTest::gtest_main
        hardware-config
        logging
        microkernels-all
        microparams-init
        packq-microkernel-tester
        pthreadpool
        vbinary-microkernel-tester
        vbinaryc-microkernel-tester
        vcvt-microkernel-tester
        vunary-microkernel-tester
      )
    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)
  ENDFOREACH()

  # Special-case
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(x8-packq-test PRIVATE kleidiai)
  ENDIF()

  IF(XNNPACK_BUILD_LIBRARY)
    ADD_EXECUTABLE(weights-cache-test test/weights-cache.cc)
    TARGET_INCLUDE_DIRECTORIES(weights-cache-test PRIVATE include src)
    TARGET_LINK_LIBRARIES(weights-cache-test PRIVATE XNNPACK pthreadpool GTest::gtest GTest::gtest_main)

    ADD_EXECUTABLE(mutex-test test/mutex.cc)
    TARGET_INCLUDE_DIRECTORIES(mutex-test PRIVATE include src)
    TARGET_LINK_LIBRARIES(mutex-test PRIVATE GTest::gtest GTest::gtest_main pthreadpool)
    TARGET_LINK_LIBRARIES(mutex-test PRIVATE logging mutex)

    ADD_EXECUTABLE(microkernel-utils-test test/microkernel-utils.cc)
    TARGET_INCLUDE_DIRECTORIES(microkernel-utils-test PRIVATE include src)
    TARGET_LINK_LIBRARIES(microkernel-utils-test PRIVATE microkernel-utils GTest::gtest GTest::gtest_main pthreadpool)

    ADD_EXECUTABLE(operator-utils-test test/operator-utils.cc)
    TARGET_INCLUDE_DIRECTORIES(operator-utils-test PRIVATE include src)
    TARGET_LINK_LIBRARIES(operator-utils-test PRIVATE XNNPACK GTest::gtest GTest::gtest_main pthreadpool)
  ENDIF()


  # ---[ Mark the operator tests as such.
  MACRO(get_all_test_targets_recursive test_targets dir)
    GET_PROPERTY(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)
    FOREACH(subdir ${subdirectories})
      get_all_test_targets_recursive(${test_targets} ${subdir})
    ENDFOREACH()

    GET_PROPERTY(current_test_targets DIRECTORY ${dir} PROPERTY TESTS)
    LIST(APPEND ${test_targets} ${current_test_targets})
  ENDMACRO()

  FUNCTION(get_all_test_targets var)
    SET(test_targets)
    get_all_test_targets_recursive(test_targets ${CMAKE_CURRENT_SOURCE_DIR})
    SET(${var} ${test_targets} PARENT_SCOPE)
  ENDFUNCTION()

  get_all_test_targets(test_targets)
  LIST(FILTER test_targets INCLUDE REGEX "-(nc|nd|nd-eager|ncw|nhwc|nhtc|nchw|nwc)-test(-[0-9]+)?$")
  MESSAGE(STATUS "Inferred operator tests: ${test_targets}")
  SET_TESTS_PROPERTIES(${test_targets} PROPERTIES LABELS "operator")

ENDIF()

# ---[ XNNPACK microbenchmarks
IF(XNNPACK_BUILD_BENCHMARKS)
  # ---[ Build google benchmark
  IF(NOT TARGET benchmark)
    IF(XNNPACK_USE_SYSTEM_LIBS)
      FIND_PACKAGE(benchmark REQUIRED)
    ELSE()
      SET(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "")
      ADD_SUBDIRECTORY(
        "${GOOGLEBENCHMARK_SOURCE_DIR}"
        "${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark")
    ENDIF()
  ENDIF()

  ADD_LIBRARY(bench-utils STATIC bench/utils.cc)
  TARGET_INCLUDE_DIRECTORIES(bench-utils PRIVATE .)
  TARGET_INCLUDE_DIRECTORIES(bench-utils PUBLIC include src)
  TARGET_LINK_LIBRARIES(bench-utils PRIVATE benchmark::benchmark cpuinfo pthreadpool)
  TARGET_LINK_LIBRARIES(bench-utils PRIVATE xnnpack-base hardware-config)
  IF(XNNPACK_BUILD_LIBRARY)
    TARGET_LINK_LIBRARIES(bench-utils PRIVATE logging memory)
  ENDIF()

  # Helper libraries
  ADD_LIBRARY(packq-benchmark STATIC bench/packq-benchmark.cc)
  TARGET_INCLUDE_DIRECTORIES(packq-benchmark PRIVATE . include src bench)
  TARGET_LINK_LIBRARIES(packq-benchmark PRIVATE XNNPACK benchmark::benchmark bench-utils)
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(packq-benchmark PRIVATE kleidiai)
  ENDIF()

  ADD_LIBRARY(gemm-benchmark STATIC bench/gemm-benchmark.cc)
  TARGET_INCLUDE_DIRECTORIES(gemm-benchmark PRIVATE . include src bench)
  TARGET_LINK_LIBRARIES(gemm-benchmark PRIVATE XNNPACK benchmark::benchmark bench-utils fp16)
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(gemm-benchmark PUBLIC kleidiai)
  ENDIF()

  IF(XNNPACK_BUILD_LIBRARY)
    # ---[ Build end-to-end microbenchmarks
    ADD_LIBRARY(bench-models STATIC
      models/fp16-mobilenet-v1.cc
      models/fp16-mobilenet-v2.cc
      models/fp16-mobilenet-v3-large.cc
      models/fp16-mobilenet-v3-small.cc
      models/fp16-sparse-mobilenet-v1.cc
      models/fp16-sparse-mobilenet-v2.cc
      models/fp16-sparse-mobilenet-v3-large.cc
      models/fp16-sparse-mobilenet-v3-small.cc
      models/fp32-mobilenet-v1.cc
      models/fp32-mobilenet-v2.cc
      models/fp32-mobilenet-v3-large.cc
      models/fp32-mobilenet-v3-small.cc
      models/fp32-sparse-mobilenet-v1.cc
      models/fp32-sparse-mobilenet-v2.cc
      models/fp32-sparse-mobilenet-v3-large.cc
      models/fp32-sparse-mobilenet-v3-small.cc
      models/qs8-qc8w-mobilenet-v1.cc
      models/qs8-qc8w-mobilenet-v2.cc
      models/qs8-mobilenet-v1.cc
      models/qs8-mobilenet-v2.cc
      models/qu8-mobilenet-v1.cc
      models/qu8-mobilenet-v2.cc
      models/qu8-mobilenet-v3-large.cc
      models/qu8-mobilenet-v3-small.cc)
    SET_TARGET_PROPERTIES(bench-models PROPERTIES CXX_EXTENSIONS YES)
    TARGET_INCLUDE_DIRECTORIES(bench-models PRIVATE .)
    TARGET_LINK_LIBRARIES(bench-models PRIVATE fp16 benchmark::benchmark)
    TARGET_LINK_LIBRARIES(bench-models PRIVATE XNNPACK bench-utils)

    SET(LIBRARY_END2END_BENCHMARKS
        end2end
        f16-gemm-e2e
        f16-dwconv-e2e
        f32-dwconv-e2e
        f32-gemm-e2e
        qs8-dwconv-e2e
        qs8-gemm-e2e
        qu8-gemm-e2e
        qu8-dwconv-e2e)

    FOREACH(BENCH ${LIBRARY_END2END_BENCHMARKS})
      ADD_EXECUTABLE(${BENCH}-bench bench/${BENCH}.cc)
      TARGET_INCLUDE_DIRECTORIES(${BENCH}-bench PRIVATE .)
      TARGET_LINK_LIBRARIES(${BENCH}-bench PRIVATE
        bench-models
        bench-utils
        benchmark::benchmark
        fp16
        hardware-config
        logging microkernels-all
        microparams-init
        XNNPACK
      )
    ENDFOREACH()

    # ---[ Build operator-level microbenchmarks
    SET(LIBRARY_OPERATOR_BENCHMARKS
        abs
        average-pooling
        bankers-rounding
        ceiling
        channel-shuffle
        convert
        convolution
        deconvolution
        elu
        floor
        global-average-pooling
        hardswish
        leaky-relu
        max-pooling
        negate
        prelu
        reciprocal-square-root
        sigmoid
        softmax
        square
        square-root
        truncation
        tanh)

    FOREACH(BENCH ${LIBRARY_OPERATOR_BENCHMARKS})
      ADD_EXECUTABLE(${BENCH}-bench bench/${BENCH}.cc)
      TARGET_INCLUDE_DIRECTORIES(${BENCH}-bench PRIVATE .)
      TARGET_LINK_LIBRARIES(${BENCH}-bench PRIVATE XNNPACK fp16 benchmark::benchmark bench-utils)
    ENDFOREACH()
  ENDIF()

  # ---[ Build microkernel-level microbenchmarks
  ADD_EXECUTABLE(bf16-gemm-bench bench/bf16-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(bf16-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(bf16-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(bf16-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-conv-hwc2chw-bench bench/f16-conv-hwc2chw.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-conv-hwc2chw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-conv-hwc2chw-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-conv-hwc2chw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-dwconv-bench bench/f16-dwconv.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-dwconv-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-dwconv-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-dwconv-bench PRIVATE bench-utils indirection hardware-config logging microkernel-utils microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-dwconv2d-chw-bench bench/f16-dwconv2d-chw.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-dwconv2d-chw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-dwconv2d-chw-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-dwconv2d-chw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-gavgpool-cw-bench bench/f16-gavgpool-cw.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-gavgpool-cw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-gavgpool-cw-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-gavgpool-cw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-f32acc-gemm-bench bench/f16-f32acc-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-f32acc-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-f32acc-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-f32acc-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-gemm-bench bench/f16-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-gemm-minmax-bench bench/f16-gemm-minmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-gemm-minmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-gemm-minmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-gemm-minmax-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-f32acc-igemm-bench bench/f16-f32acc-igemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-f32acc-igemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-f32acc-igemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-f32acc-igemm-bench PRIVATE bench-utils indirection hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-igemm-bench bench/f16-igemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-igemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-igemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-igemm-bench PRIVATE bench-utils hardware-config indirection logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f16-raddstoreexpminusmax-bench bench/f16-raddstoreexpminusmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-raddstoreexpminusmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-raddstoreexpminusmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-raddstoreexpminusmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-rsum-bench bench/f16-rsum.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-rsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-rsum-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-rsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-f32acc-rsum-bench bench/f16-f32acc-rsum.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-f32acc-rsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-f32acc-rsum-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-f32acc-rsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-rmax-bench bench/f16-rmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-rmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-rmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-rmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-rminmax-bench bench/f16-rminmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-rminmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-rminmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-rminmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-rmin-bench bench/f16-rmin.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-rmin-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-rmin-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-rmin-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-spmm-bench bench/f16-spmm.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-spmm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-spmm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-spmm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vabs-bench bench/f16-vabs.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vabs-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vabs-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vabs-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vclamp-bench bench/f16-vclamp.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vclamp-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vclamp-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vclamp-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-velu-bench bench/f16-velu.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-velu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-velu-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-velu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vhswish-bench bench/f16-vhswish.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vhswish-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vhswish-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vhswish-bench PRIVATE bench-utils microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vlrelu-bench bench/f16-vlrelu.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vlrelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vlrelu-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vlrelu-bench PRIVATE bench-utils microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vneg-bench bench/f16-vneg.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vneg-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vneg-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vneg-bench PRIVATE bench-utils microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vrndd-bench bench/f16-vrndd.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vrndd-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vrndd-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vrndd-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vrndne-bench bench/f16-vrndne.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vrndne-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vrndne-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vrndne-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vrndu-bench bench/f16-vrndu.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vrndu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vrndu-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vrndu-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vrndz-bench bench/f16-vrndz.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vrndz-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vrndz-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vrndz-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vrsqrt-bench bench/f16-vrsqrt.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vrsqrt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vrsqrt-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vrsqrt-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vsigmoid-bench bench/f16-vsigmoid.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vsigmoid-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vsigmoid-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vsigmoid-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-vsqr-bench bench/f16-vsqr.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vsqr-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vsqr-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vsqr-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vsqrt-bench bench/f16-vsqrt.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vsqrt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vsqrt-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vsqrt-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(f16-vtanh-bench bench/f16-vtanh.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-vtanh-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-vtanh-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-vtanh-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-f32-vcvt-bench bench/f16-f32-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-f32-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-f32-vcvt-bench PRIVATE fp16 benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f16-f32-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-bgemm-bench bench/f32-bgemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-bgemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-bgemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-bgemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-conv-hwc-bench bench/f32-conv-hwc.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-conv-hwc-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-conv-hwc-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-conv-hwc-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-conv-hwc2chw-bench bench/f32-conv-hwc2chw.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-conv-hwc2chw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-conv-hwc2chw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-conv-hwc2chw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-dwconv-bench bench/f32-dwconv.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-dwconv-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-dwconv-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-dwconv-bench PRIVATE bench-utils indirection hardware-config logging microkernel-utils microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-dwconv2d-chw-bench bench/f32-dwconv2d-chw.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-dwconv2d-chw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-dwconv2d-chw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-dwconv2d-chw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-f16-vcvt-bench bench/f32-f16-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-f16-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-f16-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-f16-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-gavgpool-cw-bench bench/f32-gavgpool-cw.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-gavgpool-cw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-gavgpool-cw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-gavgpool-cw-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-gemm-bench bench/f32-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-gemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-gemm-minmax-bench bench/f32-gemm-minmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-gemm-minmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-gemm-minmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f32-gemm-minmax-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-gemm-goi-minmax-bench bench/f32-gemm-goi-minmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-gemm-goi-minmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-gemm-goi-minmax-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(f32-gemm-goi-minmax-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qd8-f16-qb4w-gemm-bench bench/qd8-f16-qb4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f16-qb4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f16-qb4w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(qd8-f16-qb4w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qd8-f16-qc4w-gemm-bench bench/qd8-f16-qc4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f16-qc4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f16-qc4w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool)
  TARGET_LINK_LIBRARIES(qd8-f16-qc4w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-qc4w-gemm-bench bench/f32-qc4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-qc4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-qc4w-gemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-qc4w-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-qc8w-gemm-bench bench/f32-qc8w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-qc8w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-qc8w-gemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-qc8w-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-igemm-bench bench/f32-igemm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-igemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-igemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-igemm-bench PRIVATE bench-utils indirection hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-im2col-gemm-bench bench/f32-im2col-gemm.cc src/im2col.c)
  TARGET_INCLUDE_DIRECTORIES(f32-im2col-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-im2col-gemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-im2col-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(f32-qs8-vcvt-bench bench/f32-qs8-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-qs8-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-qs8-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-qs8-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-qu8-vcvt-bench bench/f32-qu8-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-qu8-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-qu8-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-qu8-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-raddstoreexpminusmax-bench bench/f32-raddstoreexpminusmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-raddstoreexpminusmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-raddstoreexpminusmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-raddstoreexpminusmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-raddexpminusmax-bench bench/f32-raddexpminusmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-raddexpminusmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-raddexpminusmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-raddexpminusmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-raddextexp-bench bench/f32-raddextexp.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-raddextexp-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-raddextexp-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-raddextexp-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vscaleexpminusmax-bench bench/f32-vscaleexpminusmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vscaleexpminusmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vscaleexpminusmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vscaleexpminusmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vscaleextexp-bench bench/f32-vscaleextexp.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vscaleextexp-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vscaleextexp-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vscaleextexp-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-rmax-bench bench/f32-rmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-rmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-rmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-rmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-rminmax-bench bench/f32-rminmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-rminmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-rminmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-rminmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-rmin-bench bench/f32-rmin.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-rmin-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-rmin-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-rmin-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-rsum-bench bench/f32-rsum.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-rsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-rsum-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-rsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f16-f32acc-rdsum-bench bench/f16-f32acc-rdsum.cc)
  TARGET_INCLUDE_DIRECTORIES(f16-f32acc-rdsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f16-f32acc-rdsum-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f16-f32acc-rdsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-rdsum-bench bench/f32-rdsum.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-rdsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-rdsum-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-rdsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-spmm-bench bench/f32-spmm.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-spmm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-spmm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-spmm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-softmax-bench bench/f32-softmax.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-softmax-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-softmax-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-softmax-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vcmul-bench bench/f32-vcmul.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vcmul-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vcmul-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vcmul-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qd8-f16-qc8w-gemm-bench bench/qd8-f16-qc8w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f16-qc8w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f16-qc8w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool packing)
  TARGET_LINK_LIBRARIES(qd8-f16-qc8w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qd8-f32-qc8w-gemm-bench bench/qd8-f32-qc8w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f32-qc8w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f32-qc8w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool packing)
  TARGET_LINK_LIBRARIES(qd8-f32-qc8w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qd8-f32-qb4w-gemm-bench bench/qd8-f32-qb4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f32-qb4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f32-qb4w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool packing)
  TARGET_LINK_LIBRARIES(qd8-f32-qb4w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qd8-f32-qc4w-gemm-bench bench/qd8-f32-qc4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qd8-f32-qc4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qd8-f32-qc4w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool packing)
  TARGET_LINK_LIBRARIES(qd8-f32-qc4w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qp8-f32-qc4w-gemm-bench bench/qp8-f32-qc4w-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qp8-f32-qc4w-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qp8-f32-qc4w-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool packing)
  TARGET_LINK_LIBRARIES(qp8-f32-qc4w-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vabs-bench bench/f32-vabs.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vabs-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vabs-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vabs-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-velu-bench bench/f32-velu.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-velu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-velu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-velu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vgelu-bench bench/f32-vgelu.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vgelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vgelu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vgelu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vhswish-bench bench/f32-vhswish.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vhswish-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vhswish-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vhswish-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vlrelu-bench bench/f32-vlrelu.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vlrelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vlrelu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vlrelu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vneg-bench bench/f32-vneg.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vneg-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vneg-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vneg-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vrelu-bench bench/f32-vrelu.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vrelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vrelu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vrelu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vrndd-bench bench/f32-vrndd.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vrndd-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vrndd-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vrndd-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vrndne-bench bench/f32-vrndne.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vrndne-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vrndne-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vrndne-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vrndu-bench bench/f32-vrndu.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vrndu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vrndu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vrndu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vrndz-bench bench/f32-vrndz.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vrndz-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vrndz-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vrndz-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vsigmoid-bench bench/f32-vsigmoid.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vsigmoid-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vsigmoid-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vsigmoid-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vsqr-bench bench/f32-vsqr.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vsqr-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vsqr-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vsqr-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vsqrt-bench bench/f32-vsqrt.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vsqrt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vsqrt-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vsqrt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vclamp-bench bench/f32-vclamp.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vclamp-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vclamp-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vclamp-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(f32-vtanh-bench bench/f32-vtanh.cc)
  TARGET_INCLUDE_DIRECTORIES(f32-vtanh-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(f32-vtanh-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(f32-vtanh-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-dwconv-bench bench/qs8-dwconv.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-dwconv-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-dwconv-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-dwconv-bench PRIVATE bench-utils indirection hardware-config logging microkernels-all microkernel-utils microparams-init packing)

  ADD_EXECUTABLE(qs8-f16-vcvt-bench bench/qs8-f16-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-f16-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-f16-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-f16-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-f32-vcvt-bench bench/qs8-f32-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-f32-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-f32-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-f32-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-gemm-bench bench/qs8-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-gemm-bench PRIVATE benchmark::benchmark fp16 pthreadpool microparams-init)
  TARGET_LINK_LIBRARIES(qs8-gemm-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qs8-qc8w-gemm-fp32-bench bench/qs8-qc8w-gemm-fp32.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-qc8w-gemm-fp32-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-qc8w-gemm-fp32-bench PRIVATE benchmark::benchmark fp16 pthreadpool microparams-init)
  TARGET_LINK_LIBRARIES(qs8-qc8w-gemm-fp32-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qu8-gemm-fp32-bench bench/qu8-gemm-fp32.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-gemm-fp32-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-gemm-fp32-bench PRIVATE benchmark::benchmark fp16 pthreadpool microparams-init)
  TARGET_LINK_LIBRARIES(qu8-gemm-fp32-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qu8-gemm-rndnu-bench bench/qu8-gemm-rndnu.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-gemm-rndnu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-gemm-rndnu-bench PRIVATE benchmark::benchmark fp16 pthreadpool microparams-init)
  TARGET_LINK_LIBRARIES(qu8-gemm-rndnu-bench PRIVATE gemm-benchmark bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qs8-requantization-bench bench/qs8-requantization.cc)
  SET_TARGET_PROPERTIES(qs8-requantization-bench PROPERTIES CXX_EXTENSIONS YES)
  TARGET_INCLUDE_DIRECTORIES(qs8-requantization-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-requantization-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-requantization-bench PRIVATE bench-utils microkernels-all)

  # ADD_EXECUTABLE(qs8-rdsum-minmax-fp32-test test/qs8-rdsum-minmax-fp32.cc)
  # TARGET_INCLUDE_DIRECTORIES(qs8-rdsum-minmax-fp32-test PRIVATE include src test)
  # TARGET_LINK_LIBRARIES(qs8-rdsum-minmax-fp32-test PRIVATE fp16 pthreadpool GTest::gtest GTest::gtest_main microparams-init)
  # TARGET_LINK_LIBRARIES(qs8-rdsum-minmax-fp32-test PRIVATE hardware-config logging microkernels-all)

  ADD_EXECUTABLE(qs8-rsum-bench bench/qs8-rsum.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-rsum-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-rsum-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-rsum-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vadd-bench bench/qs8-vadd.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vadd-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vadd-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vadd-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vaddc-bench bench/qs8-vaddc.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vaddc-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vaddc-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vaddc-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vcvt-bench bench/qs8-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs16-qs8-vcvt-bench bench/qs16-qs8-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qs16-qs8-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs16-qs8-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs16-qs8-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vhswish-bench bench/qs8-vhswish.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vhswish-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vhswish-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vhswish-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vlrelu-bench bench/qs8-vlrelu.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vlrelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vlrelu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vlrelu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vmul-bench bench/qs8-vmul.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vmul-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vmul-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vmul-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qs8-vmulc-bench bench/qs8-vmulc.cc)
  TARGET_INCLUDE_DIRECTORIES(qs8-vmulc-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qs8-vmulc-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qs8-vmulc-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-f32-vcvt-bench bench/qu8-f32-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-f32-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-f32-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-f32-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-gemm-bench bench/qu8-gemm.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-gemm-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-gemm-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-gemm-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init packing)

  ADD_EXECUTABLE(qu8-requantization-bench bench/qu8-requantization.cc)
  SET_TARGET_PROPERTIES(qu8-requantization-bench PROPERTIES CXX_EXTENSIONS YES)
  TARGET_INCLUDE_DIRECTORIES(qu8-requantization-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-requantization-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-requantization-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(qu8-vadd-bench bench/qu8-vadd.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vadd-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vadd-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vadd-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vaddc-bench bench/qu8-vaddc.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vaddc-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vaddc-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vaddc-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vcvt-bench bench/qu8-vcvt.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vcvt-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vcvt-bench PRIVATE fp16 benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vcvt-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vhswish-bench bench/qu8-vhswish.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vhswish-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vhswish-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vhswish-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vlrelu-bench bench/qu8-vlrelu.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vlrelu-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vlrelu-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vlrelu-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vmul-bench bench/qu8-vmul.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vmul-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vmul-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vmul-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(qu8-vmulc-bench bench/qu8-vmulc.cc)
  TARGET_INCLUDE_DIRECTORIES(qu8-vmulc-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(qu8-vmulc-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(qu8-vmulc-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(s16-rmaxabs-bench bench/s16-rmaxabs.cc)
  TARGET_INCLUDE_DIRECTORIES(s16-rmaxabs-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(s16-rmaxabs-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(s16-rmaxabs-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(s16-window-bench bench/s16-window.cc)
  TARGET_INCLUDE_DIRECTORIES(s16-window-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(s16-window-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(s16-window-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(u32-filterbank-accumulate-bench bench/u32-filterbank-accumulate.cc)
  TARGET_INCLUDE_DIRECTORIES(u32-filterbank-accumulate-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(u32-filterbank-accumulate-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(u32-filterbank-accumulate-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(u32-filterbank-subtract-bench bench/u32-filterbank-subtract.cc)
  TARGET_INCLUDE_DIRECTORIES(u32-filterbank-subtract-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(u32-filterbank-subtract-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(u32-filterbank-subtract-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(u32-vlog-bench bench/u32-vlog.cc)
  TARGET_INCLUDE_DIRECTORIES(u32-vlog-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(u32-vlog-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(u32-vlog-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(u64-u32-vsqrtshift-bench bench/u64-u32-vsqrtshift.cc)
  TARGET_INCLUDE_DIRECTORIES(u64-u32-vsqrtshift-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(u64-u32-vsqrtshift-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(u64-u32-vsqrtshift-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(i16-vlshift-bench bench/i16-vlshift.cc)
  TARGET_INCLUDE_DIRECTORIES(i16-vlshift-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(i16-vlshift-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(i16-vlshift-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(cs16-vsquareabs-bench bench/cs16-vsquareabs.cc)
  TARGET_INCLUDE_DIRECTORIES(cs16-vsquareabs-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(cs16-vsquareabs-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(cs16-vsquareabs-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(cs16-bfly4-bench bench/cs16-bfly4.cc)
  TARGET_INCLUDE_DIRECTORIES(cs16-bfly4-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(cs16-bfly4-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(cs16-bfly4-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(cs16-fftr-bench bench/cs16-fftr.cc)
  TARGET_INCLUDE_DIRECTORIES(cs16-fftr-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(cs16-fftr-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(cs16-fftr-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(xx-transposev-bench bench/xx-transposev.cc)
  TARGET_INCLUDE_DIRECTORIES(xx-transposev-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(xx-transposev-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(xx-transposev-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(x8-lut-bench bench/x8-lut.cc)
  TARGET_INCLUDE_DIRECTORIES(x8-lut-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x8-lut-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x8-lut-bench PRIVATE bench-utils microkernels-all)

  ADD_EXECUTABLE(x8-transpose-bench bench/x32-transpose.cc)
  TARGET_INCLUDE_DIRECTORIES(x8-transpose-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x8-transpose-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x8-transpose-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(x16-transpose-bench bench/x16-transpose.cc)
  TARGET_INCLUDE_DIRECTORIES(x16-transpose-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x16-transpose-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x16-transpose-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(x24-transpose-bench bench/x16-transpose.cc)
  TARGET_INCLUDE_DIRECTORIES(x24-transpose-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x24-transpose-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x24-transpose-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(x8-packq-bench bench/x8-packq.cc)
  TARGET_INCLUDE_DIRECTORIES(x8-packq-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x8-packq-bench PRIVATE benchmark::benchmark pthreadpool)
  IF(XNNPACK_ENABLE_KLEIDIAI)
    TARGET_LINK_LIBRARIES(x8-packq-bench PRIVATE kleidiai)
  ENDIF()
  TARGET_LINK_LIBRARIES(x8-packq-bench PRIVATE packq-benchmark bench-utils hardware-config logging microkernels-all packing)

  ADD_EXECUTABLE(x8-packw-bench bench/x8-packw.cc)
  TARGET_INCLUDE_DIRECTORIES(x8-packw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x8-packw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x8-packw-bench PRIVATE bench-utils hardware-config logging microkernels-all packing)

  ADD_EXECUTABLE(x16-packw-bench bench/x16-packw.cc)
  TARGET_INCLUDE_DIRECTORIES(x16-packw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x16-packw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x16-packw-bench PRIVATE bench-utils hardware-config logging microkernels-all packing)

  ADD_EXECUTABLE(x32-packw-bench bench/x32-packw.cc)
  TARGET_INCLUDE_DIRECTORIES(x32-packw-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x32-packw-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x32-packw-bench PRIVATE bench-utils hardware-config logging microkernels-all packing)

  ADD_EXECUTABLE(x32-transpose-bench bench/x32-transpose.cc)
  TARGET_INCLUDE_DIRECTORIES(x32-transpose-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x32-transpose-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x32-transpose-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

  ADD_EXECUTABLE(x64-transpose-bench bench/x64-transpose.cc)
  TARGET_INCLUDE_DIRECTORIES(x64-transpose-bench PRIVATE . include src)
  TARGET_LINK_LIBRARIES(x64-transpose-bench PRIVATE benchmark::benchmark pthreadpool)
  TARGET_LINK_LIBRARIES(x64-transpose-bench PRIVATE bench-utils hardware-config logging microkernels-all microparams-init)

ENDIF()
